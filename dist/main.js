/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/abort-controller/dist/abort-controller.js":
/*!****************************************************************!*\
  !*** ./node_modules/abort-controller/dist/abort-controller.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * See LICENSE file in root directory for full license.\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar eventTargetShim = __webpack_require__(/*! event-target-shim */ \"./node_modules/event-target-shim/dist/event-target-shim.js\");\n/**\n * The signal class.\n * @see https://dom.spec.whatwg.org/#abortsignal\n */\n\n\nclass AbortSignal extends eventTargetShim.EventTarget {\n  /**\n   * AbortSignal cannot be constructed directly.\n   */\n  constructor() {\n    super();\n    throw new TypeError(\"AbortSignal cannot be constructed directly\");\n  }\n  /**\n   * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.\n   */\n\n\n  get aborted() {\n    const aborted = abortedFlags.get(this);\n\n    if (typeof aborted !== \"boolean\") {\n      throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? \"null\" : typeof this}`);\n    }\n\n    return aborted;\n  }\n\n}\n\neventTargetShim.defineEventAttribute(AbortSignal.prototype, \"abort\");\n/**\n * Create an AbortSignal object.\n */\n\nfunction createAbortSignal() {\n  const signal = Object.create(AbortSignal.prototype);\n  eventTargetShim.EventTarget.call(signal);\n  abortedFlags.set(signal, false);\n  return signal;\n}\n/**\n * Abort a given signal.\n */\n\n\nfunction abortSignal(signal) {\n  if (abortedFlags.get(signal) !== false) {\n    return;\n  }\n\n  abortedFlags.set(signal, true);\n  signal.dispatchEvent({\n    type: \"abort\"\n  });\n}\n/**\n * Aborted flag for each instances.\n */\n\n\nconst abortedFlags = new WeakMap(); // Properties should be enumerable.\n\nObject.defineProperties(AbortSignal.prototype, {\n  aborted: {\n    enumerable: true\n  }\n}); // `toString()` should return `\"[object AbortSignal]\"`\n\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n  Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {\n    configurable: true,\n    value: \"AbortSignal\"\n  });\n}\n/**\n * The AbortController.\n * @see https://dom.spec.whatwg.org/#abortcontroller\n */\n\n\nclass AbortController {\n  /**\n   * Initialize this controller.\n   */\n  constructor() {\n    signals.set(this, createAbortSignal());\n  }\n  /**\n   * Returns the `AbortSignal` object associated with this object.\n   */\n\n\n  get signal() {\n    return getSignal(this);\n  }\n  /**\n   * Abort and signal to any observers that the associated activity is to be aborted.\n   */\n\n\n  abort() {\n    abortSignal(getSignal(this));\n  }\n\n}\n/**\n * Associated signals.\n */\n\n\nconst signals = new WeakMap();\n/**\n * Get the associated signal of a given controller.\n */\n\nfunction getSignal(controller) {\n  const signal = signals.get(controller);\n\n  if (signal == null) {\n    throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? \"null\" : typeof controller}`);\n  }\n\n  return signal;\n} // Properties should be enumerable.\n\n\nObject.defineProperties(AbortController.prototype, {\n  signal: {\n    enumerable: true\n  },\n  abort: {\n    enumerable: true\n  }\n});\n\nif (typeof Symbol === \"function\" && typeof Symbol.toStringTag === \"symbol\") {\n  Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {\n    configurable: true,\n    value: \"AbortController\"\n  });\n}\n\nexports.AbortController = AbortController;\nexports.AbortSignal = AbortSignal;\nexports[\"default\"] = AbortController;\nmodule.exports = AbortController;\nmodule.exports.AbortController = module.exports[\"default\"] = AbortController;\nmodule.exports.AbortSignal = AbortSignal;\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/abort-controller/dist/abort-controller.js?");

/***/ }),

/***/ "./node_modules/event-target-shim/dist/event-target-shim.js":
/*!******************************************************************!*\
  !*** ./node_modules/event-target-shim/dist/event-target-shim.js ***!
  \******************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("/**\n * @author Toru Nagashima <https://github.com/mysticatea>\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\n\nconst privateData = new WeakMap();\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\n\nconst wrappers = new WeakMap();\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\n\nfunction pd(event) {\n  const retv = privateData.get(event);\n  console.assert(retv != null, \"'this' is expected an Event object, but got\", event);\n  return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\n\n\nfunction setCancelFlag(data) {\n  if (data.passiveListener != null) {\n    if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n      console.error(\"Unable to preventDefault inside passive event listener invocation.\", data.passiveListener);\n    }\n\n    return;\n  }\n\n  if (!data.event.cancelable) {\n    return;\n  }\n\n  data.canceled = true;\n\n  if (typeof data.event.preventDefault === \"function\") {\n    data.event.preventDefault();\n  }\n}\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\n\n\nfunction Event(eventTarget, event) {\n  privateData.set(this, {\n    eventTarget,\n    event,\n    eventPhase: 2,\n    currentTarget: eventTarget,\n    canceled: false,\n    stopped: false,\n    immediateStopped: false,\n    passiveListener: null,\n    timeStamp: event.timeStamp || Date.now()\n  }); // https://heycam.github.io/webidl/#Unforgeable\n\n  Object.defineProperty(this, \"isTrusted\", {\n    value: false,\n    enumerable: true\n  }); // Define accessors\n\n  const keys = Object.keys(event);\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n\n    if (!(key in this)) {\n      Object.defineProperty(this, key, defineRedirectDescriptor(key));\n    }\n  }\n} // Should be enumerable, but class methods are not enumerable.\n\n\nEvent.prototype = {\n  /**\n   * The type of this event.\n   * @type {string}\n   */\n  get type() {\n    return pd(this).event.type;\n  },\n\n  /**\n   * The target of this event.\n   * @type {EventTarget}\n   */\n  get target() {\n    return pd(this).eventTarget;\n  },\n\n  /**\n   * The target of this event.\n   * @type {EventTarget}\n   */\n  get currentTarget() {\n    return pd(this).currentTarget;\n  },\n\n  /**\n   * @returns {EventTarget[]} The composed path of this event.\n   */\n  composedPath() {\n    const currentTarget = pd(this).currentTarget;\n\n    if (currentTarget == null) {\n      return [];\n    }\n\n    return [currentTarget];\n  },\n\n  /**\n   * Constant of NONE.\n   * @type {number}\n   */\n  get NONE() {\n    return 0;\n  },\n\n  /**\n   * Constant of CAPTURING_PHASE.\n   * @type {number}\n   */\n  get CAPTURING_PHASE() {\n    return 1;\n  },\n\n  /**\n   * Constant of AT_TARGET.\n   * @type {number}\n   */\n  get AT_TARGET() {\n    return 2;\n  },\n\n  /**\n   * Constant of BUBBLING_PHASE.\n   * @type {number}\n   */\n  get BUBBLING_PHASE() {\n    return 3;\n  },\n\n  /**\n   * The target of this event.\n   * @type {number}\n   */\n  get eventPhase() {\n    return pd(this).eventPhase;\n  },\n\n  /**\n   * Stop event bubbling.\n   * @returns {void}\n   */\n  stopPropagation() {\n    const data = pd(this);\n    data.stopped = true;\n\n    if (typeof data.event.stopPropagation === \"function\") {\n      data.event.stopPropagation();\n    }\n  },\n\n  /**\n   * Stop event bubbling.\n   * @returns {void}\n   */\n  stopImmediatePropagation() {\n    const data = pd(this);\n    data.stopped = true;\n    data.immediateStopped = true;\n\n    if (typeof data.event.stopImmediatePropagation === \"function\") {\n      data.event.stopImmediatePropagation();\n    }\n  },\n\n  /**\n   * The flag to be bubbling.\n   * @type {boolean}\n   */\n  get bubbles() {\n    return Boolean(pd(this).event.bubbles);\n  },\n\n  /**\n   * The flag to be cancelable.\n   * @type {boolean}\n   */\n  get cancelable() {\n    return Boolean(pd(this).event.cancelable);\n  },\n\n  /**\n   * Cancel this event.\n   * @returns {void}\n   */\n  preventDefault() {\n    setCancelFlag(pd(this));\n  },\n\n  /**\n   * The flag to indicate cancellation state.\n   * @type {boolean}\n   */\n  get defaultPrevented() {\n    return pd(this).canceled;\n  },\n\n  /**\n   * The flag to be composed.\n   * @type {boolean}\n   */\n  get composed() {\n    return Boolean(pd(this).event.composed);\n  },\n\n  /**\n   * The unix time of this event.\n   * @type {number}\n   */\n  get timeStamp() {\n    return pd(this).timeStamp;\n  },\n\n  /**\n   * The target of this event.\n   * @type {EventTarget}\n   * @deprecated\n   */\n  get srcElement() {\n    return pd(this).eventTarget;\n  },\n\n  /**\n   * The flag to stop event bubbling.\n   * @type {boolean}\n   * @deprecated\n   */\n  get cancelBubble() {\n    return pd(this).stopped;\n  },\n\n  set cancelBubble(value) {\n    if (!value) {\n      return;\n    }\n\n    const data = pd(this);\n    data.stopped = true;\n\n    if (typeof data.event.cancelBubble === \"boolean\") {\n      data.event.cancelBubble = true;\n    }\n  },\n\n  /**\n   * The flag to indicate cancellation state.\n   * @type {boolean}\n   * @deprecated\n   */\n  get returnValue() {\n    return !pd(this).canceled;\n  },\n\n  set returnValue(value) {\n    if (!value) {\n      setCancelFlag(pd(this));\n    }\n  },\n\n  /**\n   * Initialize this event object. But do nothing under event dispatching.\n   * @param {string} type The event type.\n   * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n   * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n   * @deprecated\n   */\n  initEvent() {// Do nothing.\n  }\n\n}; // `constructor` is not enumerable.\n\nObject.defineProperty(Event.prototype, \"constructor\", {\n  value: Event,\n  configurable: true,\n  writable: true\n}); // Ensure `event instanceof window.Event` is `true`.\n\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n  Object.setPrototypeOf(Event.prototype, window.Event.prototype); // Make association for wrappers.\n\n  wrappers.set(window.Event.prototype, Event);\n}\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\n\n\nfunction defineRedirectDescriptor(key) {\n  return {\n    get() {\n      return pd(this).event[key];\n    },\n\n    set(value) {\n      pd(this).event[key] = value;\n    },\n\n    configurable: true,\n    enumerable: true\n  };\n}\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\n\n\nfunction defineCallDescriptor(key) {\n  return {\n    value() {\n      const event = pd(this).event;\n      return event[key].apply(event, arguments);\n    },\n\n    configurable: true,\n    enumerable: true\n  };\n}\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\n\n\nfunction defineWrapper(BaseEvent, proto) {\n  const keys = Object.keys(proto);\n\n  if (keys.length === 0) {\n    return BaseEvent;\n  }\n  /** CustomEvent */\n\n\n  function CustomEvent(eventTarget, event) {\n    BaseEvent.call(this, eventTarget, event);\n  }\n\n  CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n    constructor: {\n      value: CustomEvent,\n      configurable: true,\n      writable: true\n    }\n  }); // Define accessors.\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n\n    if (!(key in BaseEvent.prototype)) {\n      const descriptor = Object.getOwnPropertyDescriptor(proto, key);\n      const isFunc = typeof descriptor.value === \"function\";\n      Object.defineProperty(CustomEvent.prototype, key, isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key));\n    }\n  }\n\n  return CustomEvent;\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\n\n\nfunction getWrapper(proto) {\n  if (proto == null || proto === Object.prototype) {\n    return Event;\n  }\n\n  let wrapper = wrappers.get(proto);\n\n  if (wrapper == null) {\n    wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\n    wrappers.set(proto, wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\n\n\nfunction wrapEvent(eventTarget, event) {\n  const Wrapper = getWrapper(Object.getPrototypeOf(event));\n  return new Wrapper(eventTarget, event);\n}\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\n\n\nfunction isStopped(event) {\n  return pd(event).immediateStopped;\n}\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\n\n\nfunction setEventPhase(event, eventPhase) {\n  pd(event).eventPhase = eventPhase;\n}\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\n\n\nfunction setCurrentTarget(event, currentTarget) {\n  pd(event).currentTarget = currentTarget;\n}\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\n\n\nfunction setPassiveListener(event, passiveListener) {\n  pd(event).passiveListener = passiveListener;\n}\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\n\n\nconst listenersMap = new WeakMap(); // Listener types\n\nconst CAPTURE = 1;\nconst BUBBLE = 2;\nconst ATTRIBUTE = 3;\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\n\nfunction isObject(x) {\n  return x !== null && typeof x === \"object\"; //eslint-disable-line no-restricted-syntax\n}\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\n\n\nfunction getListeners(eventTarget) {\n  const listeners = listenersMap.get(eventTarget);\n\n  if (listeners == null) {\n    throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");\n  }\n\n  return listeners;\n}\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\n\n\nfunction defineEventAttributeDescriptor(eventName) {\n  return {\n    get() {\n      const listeners = getListeners(this);\n      let node = listeners.get(eventName);\n\n      while (node != null) {\n        if (node.listenerType === ATTRIBUTE) {\n          return node.listener;\n        }\n\n        node = node.next;\n      }\n\n      return null;\n    },\n\n    set(listener) {\n      if (typeof listener !== \"function\" && !isObject(listener)) {\n        listener = null; // eslint-disable-line no-param-reassign\n      }\n\n      const listeners = getListeners(this); // Traverse to the tail while removing old value.\n\n      let prev = null;\n      let node = listeners.get(eventName);\n\n      while (node != null) {\n        if (node.listenerType === ATTRIBUTE) {\n          // Remove old value.\n          if (prev !== null) {\n            prev.next = node.next;\n          } else if (node.next !== null) {\n            listeners.set(eventName, node.next);\n          } else {\n            listeners.delete(eventName);\n          }\n        } else {\n          prev = node;\n        }\n\n        node = node.next;\n      } // Add new value.\n\n\n      if (listener !== null) {\n        const newNode = {\n          listener,\n          listenerType: ATTRIBUTE,\n          passive: false,\n          once: false,\n          next: null\n        };\n\n        if (prev === null) {\n          listeners.set(eventName, newNode);\n        } else {\n          prev.next = newNode;\n        }\n      }\n    },\n\n    configurable: true,\n    enumerable: true\n  };\n}\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\n\n\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n  Object.defineProperty(eventTargetPrototype, `on${eventName}`, defineEventAttributeDescriptor(eventName));\n}\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\n\n\nfunction defineCustomEventTarget(eventNames) {\n  /** CustomEventTarget */\n  function CustomEventTarget() {\n    EventTarget.call(this);\n  }\n\n  CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n    constructor: {\n      value: CustomEventTarget,\n      configurable: true,\n      writable: true\n    }\n  });\n\n  for (let i = 0; i < eventNames.length; ++i) {\n    defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\n  }\n\n  return CustomEventTarget;\n}\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\n\n\nfunction EventTarget() {\n  /*eslint-disable consistent-return */\n  if (this instanceof EventTarget) {\n    listenersMap.set(this, new Map());\n    return;\n  }\n\n  if (arguments.length === 1 && Array.isArray(arguments[0])) {\n    return defineCustomEventTarget(arguments[0]);\n  }\n\n  if (arguments.length > 0) {\n    const types = new Array(arguments.length);\n\n    for (let i = 0; i < arguments.length; ++i) {\n      types[i] = arguments[i];\n    }\n\n    return defineCustomEventTarget(types);\n  }\n\n  throw new TypeError(\"Cannot call a class as a function\");\n  /*eslint-enable consistent-return */\n} // Should be enumerable, but class methods are not enumerable.\n\n\nEventTarget.prototype = {\n  /**\n   * Add a given listener to this event target.\n   * @param {string} eventName The event name to add.\n   * @param {Function} listener The listener to add.\n   * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n   * @returns {void}\n   */\n  addEventListener(eventName, listener, options) {\n    if (listener == null) {\n      return;\n    }\n\n    if (typeof listener !== \"function\" && !isObject(listener)) {\n      throw new TypeError(\"'listener' should be a function or an object.\");\n    }\n\n    const listeners = getListeners(this);\n    const optionsIsObj = isObject(options);\n    const capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);\n    const listenerType = capture ? CAPTURE : BUBBLE;\n    const newNode = {\n      listener,\n      listenerType,\n      passive: optionsIsObj && Boolean(options.passive),\n      once: optionsIsObj && Boolean(options.once),\n      next: null\n    }; // Set it as the first node if the first node is null.\n\n    let node = listeners.get(eventName);\n\n    if (node === undefined) {\n      listeners.set(eventName, newNode);\n      return;\n    } // Traverse to the tail while checking duplication..\n\n\n    let prev = null;\n\n    while (node != null) {\n      if (node.listener === listener && node.listenerType === listenerType) {\n        // Should ignore duplication.\n        return;\n      }\n\n      prev = node;\n      node = node.next;\n    } // Add it.\n\n\n    prev.next = newNode;\n  },\n\n  /**\n   * Remove a given listener from this event target.\n   * @param {string} eventName The event name to remove.\n   * @param {Function} listener The listener to remove.\n   * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n   * @returns {void}\n   */\n  removeEventListener(eventName, listener, options) {\n    if (listener == null) {\n      return;\n    }\n\n    const listeners = getListeners(this);\n    const capture = isObject(options) ? Boolean(options.capture) : Boolean(options);\n    const listenerType = capture ? CAPTURE : BUBBLE;\n    let prev = null;\n    let node = listeners.get(eventName);\n\n    while (node != null) {\n      if (node.listener === listener && node.listenerType === listenerType) {\n        if (prev !== null) {\n          prev.next = node.next;\n        } else if (node.next !== null) {\n          listeners.set(eventName, node.next);\n        } else {\n          listeners.delete(eventName);\n        }\n\n        return;\n      }\n\n      prev = node;\n      node = node.next;\n    }\n  },\n\n  /**\n   * Dispatch a given event.\n   * @param {Event|{type:string}} event The event to dispatch.\n   * @returns {boolean} `false` if canceled.\n   */\n  dispatchEvent(event) {\n    if (event == null || typeof event.type !== \"string\") {\n      throw new TypeError('\"event.type\" should be a string.');\n    } // If listeners aren't registered, terminate.\n\n\n    const listeners = getListeners(this);\n    const eventName = event.type;\n    let node = listeners.get(eventName);\n\n    if (node == null) {\n      return true;\n    } // Since we cannot rewrite several properties, so wrap object.\n\n\n    const wrappedEvent = wrapEvent(this, event); // This doesn't process capturing phase and bubbling phase.\n    // This isn't participating in a tree.\n\n    let prev = null;\n\n    while (node != null) {\n      // Remove this listener if it's once\n      if (node.once) {\n        if (prev !== null) {\n          prev.next = node.next;\n        } else if (node.next !== null) {\n          listeners.set(eventName, node.next);\n        } else {\n          listeners.delete(eventName);\n        }\n      } else {\n        prev = node;\n      } // Call this listener\n\n\n      setPassiveListener(wrappedEvent, node.passive ? node.listener : null);\n\n      if (typeof node.listener === \"function\") {\n        try {\n          node.listener.call(this, wrappedEvent);\n        } catch (err) {\n          if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n            console.error(err);\n          }\n        }\n      } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === \"function\") {\n        node.listener.handleEvent(wrappedEvent);\n      } // Break if `event.stopImmediatePropagation` was called.\n\n\n      if (isStopped(wrappedEvent)) {\n        break;\n      }\n\n      node = node.next;\n    }\n\n    setPassiveListener(wrappedEvent, null);\n    setEventPhase(wrappedEvent, 0);\n    setCurrentTarget(wrappedEvent, null);\n    return !wrappedEvent.defaultPrevented;\n  }\n\n}; // `constructor` is not enumerable.\n\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n  value: EventTarget,\n  configurable: true,\n  writable: true\n}); // Ensure `eventTarget instanceof window.EventTarget` is `true`.\n\nif (typeof window !== \"undefined\" && typeof window.EventTarget !== \"undefined\") {\n  Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);\n}\n\nexports.defineEventAttribute = defineEventAttribute;\nexports.EventTarget = EventTarget;\nexports[\"default\"] = EventTarget;\nmodule.exports = EventTarget;\nmodule.exports.EventTarget = module.exports[\"default\"] = EventTarget;\nmodule.exports.defineEventAttribute = defineEventAttribute;\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/event-target-shim/dist/event-target-shim.js?");

/***/ }),

/***/ "./node_modules/node-domexception/index.js":
/*!*************************************************!*\
  !*** ./node_modules/node-domexception/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\nif (!globalThis.DOMException) {\n  try {\n    const {\n      MessageChannel\n    } = __webpack_require__(/*! worker_threads */ \"worker_threads\"),\n          port = new MessageChannel().port1,\n          ab = new ArrayBuffer();\n\n    port.postMessage(ab, [ab, ab]);\n  } catch (err) {\n    err.constructor.name === 'DOMException' && (globalThis.DOMException = err.constructor);\n  }\n}\n\nmodule.exports = globalThis.DOMException;\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-domexception/index.js?");

/***/ }),

/***/ "./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js":
/*!*******************************************************************!*\
  !*** ./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/**\n * web-streams-polyfill v3.2.1\n */\n(function (global, factory) {\n   true ? factory(exports) : 0;\n})(this, function (exports) {\n  'use strict'; /// <reference lib=\"es2015.symbol\" />\n\n  const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol : description => `Symbol(${description})`; /// <reference lib=\"dom\" />\n\n  function noop() {\n    return undefined;\n  }\n\n  function getGlobals() {\n    if (typeof self !== 'undefined') {\n      return self;\n    } else if (typeof window !== 'undefined') {\n      return window;\n    } else if (typeof global !== 'undefined') {\n      return global;\n    }\n\n    return undefined;\n  }\n\n  const globals = getGlobals();\n\n  function typeIsObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n\n  const rethrowAssertionErrorRejection = noop;\n  const originalPromise = Promise;\n  const originalPromiseThen = Promise.prototype.then;\n  const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n  const originalPromiseReject = Promise.reject.bind(originalPromise);\n\n  function newPromise(executor) {\n    return new originalPromise(executor);\n  }\n\n  function promiseResolvedWith(value) {\n    return originalPromiseResolve(value);\n  }\n\n  function promiseRejectedWith(reason) {\n    return originalPromiseReject(reason);\n  }\n\n  function PerformPromiseThen(promise, onFulfilled, onRejected) {\n    // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n    // approximation.\n    return originalPromiseThen.call(promise, onFulfilled, onRejected);\n  }\n\n  function uponPromise(promise, onFulfilled, onRejected) {\n    PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n  }\n\n  function uponFulfillment(promise, onFulfilled) {\n    uponPromise(promise, onFulfilled);\n  }\n\n  function uponRejection(promise, onRejected) {\n    uponPromise(promise, undefined, onRejected);\n  }\n\n  function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n    return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n  }\n\n  function setPromiseIsHandledToTrue(promise) {\n    PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n  }\n\n  const queueMicrotask = (() => {\n    const globalQueueMicrotask = globals && globals.queueMicrotask;\n\n    if (typeof globalQueueMicrotask === 'function') {\n      return globalQueueMicrotask;\n    }\n\n    const resolvedPromise = promiseResolvedWith(undefined);\n    return fn => PerformPromiseThen(resolvedPromise, fn);\n  })();\n\n  function reflectCall(F, V, args) {\n    if (typeof F !== 'function') {\n      throw new TypeError('Argument is not a function');\n    }\n\n    return Function.prototype.apply.call(F, V, args);\n  }\n\n  function promiseCall(F, V, args) {\n    try {\n      return promiseResolvedWith(reflectCall(F, V, args));\n    } catch (value) {\n      return promiseRejectedWith(value);\n    }\n  } // Original from Chromium\n  // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\n\n  const QUEUE_MAX_ARRAY_SIZE = 16384;\n  /**\n   * Simple queue structure.\n   *\n   * Avoids scalability issues with using a packed array directly by using\n   * multiple arrays in a linked list and keeping the array size bounded.\n   */\n\n  class SimpleQueue {\n    constructor() {\n      this._cursor = 0;\n      this._size = 0; // _front and _back are always defined.\n\n      this._front = {\n        _elements: [],\n        _next: undefined\n      };\n      this._back = this._front; // The cursor is used to avoid calling Array.shift().\n      // It contains the index of the front element of the array inside the\n      // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n\n      this._cursor = 0; // When there is only one node, size === elements.length - cursor.\n\n      this._size = 0;\n    }\n\n    get length() {\n      return this._size;\n    } // For exception safety, this method is structured in order:\n    // 1. Read state\n    // 2. Calculate required state mutations\n    // 3. Perform state mutations\n\n\n    push(element) {\n      const oldBack = this._back;\n      let newBack = oldBack;\n\n      if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n        newBack = {\n          _elements: [],\n          _next: undefined\n        };\n      } // push() is the mutation most likely to throw an exception, so it\n      // goes first.\n\n\n      oldBack._elements.push(element);\n\n      if (newBack !== oldBack) {\n        this._back = newBack;\n        oldBack._next = newBack;\n      }\n\n      ++this._size;\n    } // Like push(), shift() follows the read -> calculate -> mutate pattern for\n    // exception safety.\n\n\n    shift() {\n      // must not be called on an empty queue\n      const oldFront = this._front;\n      let newFront = oldFront;\n      const oldCursor = this._cursor;\n      let newCursor = oldCursor + 1;\n      const elements = oldFront._elements;\n      const element = elements[oldCursor];\n\n      if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n        newFront = oldFront._next;\n        newCursor = 0;\n      } // No mutations before this point.\n\n\n      --this._size;\n      this._cursor = newCursor;\n\n      if (oldFront !== newFront) {\n        this._front = newFront;\n      } // Permit shifted element to be garbage collected.\n\n\n      elements[oldCursor] = undefined;\n      return element;\n    } // The tricky thing about forEach() is that it can be called\n    // re-entrantly. The queue may be mutated inside the callback. It is easy to\n    // see that push() within the callback has no negative effects since the end\n    // of the queue is checked for on every iteration. If shift() is called\n    // repeatedly within the callback then the next iteration may return an\n    // element that has been removed. In this case the callback will be called\n    // with undefined values until we either \"catch up\" with elements that still\n    // exist or reach the back of the queue.\n\n\n    forEach(callback) {\n      let i = this._cursor;\n      let node = this._front;\n      let elements = node._elements;\n\n      while (i !== elements.length || node._next !== undefined) {\n        if (i === elements.length) {\n          node = node._next;\n          elements = node._elements;\n          i = 0;\n\n          if (elements.length === 0) {\n            break;\n          }\n        }\n\n        callback(elements[i]);\n        ++i;\n      }\n    } // Return the element that would be returned if shift() was called now,\n    // without modifying the queue.\n\n\n    peek() {\n      // must not be called on an empty queue\n      const front = this._front;\n      const cursor = this._cursor;\n      return front._elements[cursor];\n    }\n\n  }\n\n  function ReadableStreamReaderGenericInitialize(reader, stream) {\n    reader._ownerReadableStream = stream;\n    stream._reader = reader;\n\n    if (stream._state === 'readable') {\n      defaultReaderClosedPromiseInitialize(reader);\n    } else if (stream._state === 'closed') {\n      defaultReaderClosedPromiseInitializeAsResolved(reader);\n    } else {\n      defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    }\n  } // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n  // check.\n\n\n  function ReadableStreamReaderGenericCancel(reader, reason) {\n    const stream = reader._ownerReadableStream;\n    return ReadableStreamCancel(stream, reason);\n  }\n\n  function ReadableStreamReaderGenericRelease(reader) {\n    if (reader._ownerReadableStream._state === 'readable') {\n      defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n    } else {\n      defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n    }\n\n    reader._ownerReadableStream._reader = undefined;\n    reader._ownerReadableStream = undefined;\n  } // Helper functions for the readers.\n\n\n  function readerLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released reader');\n  } // Helper functions for the ReadableStreamDefaultReader.\n\n\n  function defaultReaderClosedPromiseInitialize(reader) {\n    reader._closedPromise = newPromise((resolve, reject) => {\n      reader._closedPromise_resolve = resolve;\n      reader._closedPromise_reject = reject;\n    });\n  }\n\n  function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseReject(reader, reason);\n  }\n\n  function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseResolve(reader);\n  }\n\n  function defaultReaderClosedPromiseReject(reader, reason) {\n    if (reader._closedPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(reader._closedPromise);\n\n    reader._closedPromise_reject(reason);\n\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n\n  function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n    defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n  }\n\n  function defaultReaderClosedPromiseResolve(reader) {\n    if (reader._closedPromise_resolve === undefined) {\n      return;\n    }\n\n    reader._closedPromise_resolve(undefined);\n\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n\n  const AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n  const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n  const CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n  const PullSteps = SymbolPolyfill('[[PullSteps]]'); /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n\n  const NumberIsFinite = Number.isFinite || function (x) {\n    return typeof x === 'number' && isFinite(x);\n  }; /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n\n\n  const MathTrunc = Math.trunc || function (v) {\n    return v < 0 ? Math.ceil(v) : Math.floor(v);\n  }; // https://heycam.github.io/webidl/#idl-dictionaries\n\n\n  function isDictionary(x) {\n    return typeof x === 'object' || typeof x === 'function';\n  }\n\n  function assertDictionary(obj, context) {\n    if (obj !== undefined && !isDictionary(obj)) {\n      throw new TypeError(`${context} is not an object.`);\n    }\n  } // https://heycam.github.io/webidl/#idl-callback-functions\n\n\n  function assertFunction(x, context) {\n    if (typeof x !== 'function') {\n      throw new TypeError(`${context} is not a function.`);\n    }\n  } // https://heycam.github.io/webidl/#idl-object\n\n\n  function isObject(x) {\n    return typeof x === 'object' && x !== null || typeof x === 'function';\n  }\n\n  function assertObject(x, context) {\n    if (!isObject(x)) {\n      throw new TypeError(`${context} is not an object.`);\n    }\n  }\n\n  function assertRequiredArgument(x, position, context) {\n    if (x === undefined) {\n      throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n    }\n  }\n\n  function assertRequiredField(x, field, context) {\n    if (x === undefined) {\n      throw new TypeError(`${field} is required in '${context}'.`);\n    }\n  } // https://heycam.github.io/webidl/#idl-unrestricted-double\n\n\n  function convertUnrestrictedDouble(value) {\n    return Number(value);\n  }\n\n  function censorNegativeZero(x) {\n    return x === 0 ? 0 : x;\n  }\n\n  function integerPart(x) {\n    return censorNegativeZero(MathTrunc(x));\n  } // https://heycam.github.io/webidl/#idl-unsigned-long-long\n\n\n  function convertUnsignedLongLongWithEnforceRange(value, context) {\n    const lowerBound = 0;\n    const upperBound = Number.MAX_SAFE_INTEGER;\n    let x = Number(value);\n    x = censorNegativeZero(x);\n\n    if (!NumberIsFinite(x)) {\n      throw new TypeError(`${context} is not a finite number`);\n    }\n\n    x = integerPart(x);\n\n    if (x < lowerBound || x > upperBound) {\n      throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n    }\n\n    if (!NumberIsFinite(x) || x === 0) {\n      return 0;\n    } // TODO Use BigInt if supported?\n    // let xBigInt = BigInt(integerPart(x));\n    // xBigInt = BigInt.asUintN(64, xBigInt);\n    // return Number(xBigInt);\n\n\n    return x;\n  }\n\n  function assertReadableStream(x, context) {\n    if (!IsReadableStream(x)) {\n      throw new TypeError(`${context} is not a ReadableStream.`);\n    }\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamDefaultReader(stream) {\n    return new ReadableStreamDefaultReader(stream);\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamAddReadRequest(stream, readRequest) {\n    stream._reader._readRequests.push(readRequest);\n  }\n\n  function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n    const reader = stream._reader;\n\n    const readRequest = reader._readRequests.shift();\n\n    if (done) {\n      readRequest._closeSteps();\n    } else {\n      readRequest._chunkSteps(chunk);\n    }\n  }\n\n  function ReadableStreamGetNumReadRequests(stream) {\n    return stream._reader._readRequests.length;\n  }\n\n  function ReadableStreamHasDefaultReader(stream) {\n    const reader = stream._reader;\n\n    if (reader === undefined) {\n      return false;\n    }\n\n    if (!IsReadableStreamDefaultReader(reader)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * A default reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n\n\n  class ReadableStreamDefaultReader {\n    constructor(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n      assertReadableStream(stream, 'First parameter');\n\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readRequests = new SimpleQueue();\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed,\n     * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n     */\n\n\n    get closed() {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n      }\n\n      return this._closedPromise;\n    }\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n\n\n    cancel(reason = undefined) {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n\n      return ReadableStreamReaderGenericCancel(this, reason);\n    }\n    /**\n     * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n\n\n    read() {\n      if (!IsReadableStreamDefaultReader(this)) {\n        return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n\n      let resolvePromise;\n      let rejectPromise;\n      const promise = newPromise((resolve, reject) => {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      const readRequest = {\n        _chunkSteps: chunk => resolvePromise({\n          value: chunk,\n          done: false\n        }),\n        _closeSteps: () => resolvePromise({\n          value: undefined,\n          done: true\n        }),\n        _errorSteps: e => rejectPromise(e)\n      };\n      ReadableStreamDefaultReaderRead(this, readRequest);\n      return promise;\n    }\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n\n\n    releaseLock() {\n      if (!IsReadableStreamDefaultReader(this)) {\n        throw defaultReaderBrandCheckException('releaseLock');\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n\n      if (this._readRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n\n      ReadableStreamReaderGenericRelease(this);\n    }\n\n  }\n\n  Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultReader',\n      configurable: true\n    });\n  } // Abstract operations for the readers.\n\n\n  function IsReadableStreamDefaultReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamDefaultReader;\n  }\n\n  function ReadableStreamDefaultReaderRead(reader, readRequest) {\n    const stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n\n    if (stream._state === 'closed') {\n      readRequest._closeSteps();\n    } else if (stream._state === 'errored') {\n      readRequest._errorSteps(stream._storedError);\n    } else {\n      stream._readableStreamController[PullSteps](readRequest);\n    }\n  } // Helper functions for the ReadableStreamDefaultReader.\n\n\n  function defaultReaderBrandCheckException(name) {\n    return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n  } /// <reference lib=\"es2018.asynciterable\" />\n\n  /* eslint-disable @typescript-eslint/no-empty-function */\n\n\n  const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {}).prototype); /// <reference lib=\"es2018.asynciterable\" />\n\n  class ReadableStreamAsyncIteratorImpl {\n    constructor(reader, preventCancel) {\n      this._ongoingPromise = undefined;\n      this._isFinished = false;\n      this._reader = reader;\n      this._preventCancel = preventCancel;\n    }\n\n    next() {\n      const nextSteps = () => this._nextSteps();\n\n      this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n      return this._ongoingPromise;\n    }\n\n    return(value) {\n      const returnSteps = () => this._returnSteps(value);\n\n      return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n    }\n\n    _nextSteps() {\n      if (this._isFinished) {\n        return Promise.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n\n      const reader = this._reader;\n\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('iterate'));\n      }\n\n      let resolvePromise;\n      let rejectPromise;\n      const promise = newPromise((resolve, reject) => {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      const readRequest = {\n        _chunkSteps: chunk => {\n          this._ongoingPromise = undefined; // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n          // FIXME Is this a bug in the specification, or in the test?\n\n          queueMicrotask(() => resolvePromise({\n            value: chunk,\n            done: false\n          }));\n        },\n        _closeSteps: () => {\n          this._ongoingPromise = undefined;\n          this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          resolvePromise({\n            value: undefined,\n            done: true\n          });\n        },\n        _errorSteps: reason => {\n          this._ongoingPromise = undefined;\n          this._isFinished = true;\n          ReadableStreamReaderGenericRelease(reader);\n          rejectPromise(reason);\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promise;\n    }\n\n    _returnSteps(value) {\n      if (this._isFinished) {\n        return Promise.resolve({\n          value,\n          done: true\n        });\n      }\n\n      this._isFinished = true;\n      const reader = this._reader;\n\n      if (reader._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('finish iterating'));\n      }\n\n      if (!this._preventCancel) {\n        const result = ReadableStreamReaderGenericCancel(reader, value);\n        ReadableStreamReaderGenericRelease(reader);\n        return transformPromiseWith(result, () => ({\n          value,\n          done: true\n        }));\n      }\n\n      ReadableStreamReaderGenericRelease(reader);\n      return promiseResolvedWith({\n        value,\n        done: true\n      });\n    }\n\n  }\n\n  const ReadableStreamAsyncIteratorPrototype = {\n    next() {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n      }\n\n      return this._asyncIteratorImpl.next();\n    },\n\n    return(value) {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n      }\n\n      return this._asyncIteratorImpl.return(value);\n    }\n\n  };\n\n  if (AsyncIteratorPrototype !== undefined) {\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n    const reader = AcquireReadableStreamDefaultReader(stream);\n    const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n    const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n    iterator._asyncIteratorImpl = impl;\n    return iterator;\n  }\n\n  function IsReadableStreamAsyncIterator(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n      return false;\n    }\n\n    try {\n      // noinspection SuspiciousTypeOfGuard\n      return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n    } catch (_a) {\n      return false;\n    }\n  } // Helper functions for the ReadableStream.\n\n\n  function streamAsyncIteratorBrandCheckException(name) {\n    return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n  } /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n\n\n  const NumberIsNaN = Number.isNaN || function (x) {\n    // eslint-disable-next-line no-self-compare\n    return x !== x;\n  };\n\n  function CreateArrayFromList(elements) {\n    // We use arrays to represent lists, so this is basically a no-op.\n    // Do a slice though just in case we happen to depend on the unique-ness.\n    return elements.slice();\n  }\n\n  function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n    new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n  } // Not implemented correctly\n\n\n  function TransferArrayBuffer(O) {\n    return O;\n  } // Not implemented correctly\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  function IsDetachedBuffer(O) {\n    return false;\n  }\n\n  function ArrayBufferSlice(buffer, begin, end) {\n    // ArrayBuffer.prototype.slice is not available on IE10\n    // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n    if (buffer.slice) {\n      return buffer.slice(begin, end);\n    }\n\n    const length = end - begin;\n    const slice = new ArrayBuffer(length);\n    CopyDataBlockBytes(slice, 0, buffer, begin, length);\n    return slice;\n  }\n\n  function IsNonNegativeNumber(v) {\n    if (typeof v !== 'number') {\n      return false;\n    }\n\n    if (NumberIsNaN(v)) {\n      return false;\n    }\n\n    if (v < 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function CloneAsUint8Array(O) {\n    const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n    return new Uint8Array(buffer);\n  }\n\n  function DequeueValue(container) {\n    const pair = container._queue.shift();\n\n    container._queueTotalSize -= pair.size;\n\n    if (container._queueTotalSize < 0) {\n      container._queueTotalSize = 0;\n    }\n\n    return pair.value;\n  }\n\n  function EnqueueValueWithSize(container, value, size) {\n    if (!IsNonNegativeNumber(size) || size === Infinity) {\n      throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n    }\n\n    container._queue.push({\n      value,\n      size\n    });\n\n    container._queueTotalSize += size;\n  }\n\n  function PeekQueueValue(container) {\n    const pair = container._queue.peek();\n\n    return pair.value;\n  }\n\n  function ResetQueue(container) {\n    container._queue = new SimpleQueue();\n    container._queueTotalSize = 0;\n  }\n  /**\n   * A pull-into request in a {@link ReadableByteStreamController}.\n   *\n   * @public\n   */\n\n\n  class ReadableStreamBYOBRequest {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n     */\n\n\n    get view() {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('view');\n      }\n\n      return this._view;\n    }\n\n    respond(bytesWritten) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respond');\n      }\n\n      assertRequiredArgument(bytesWritten, 1, 'respond');\n      bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n\n      if (IsDetachedBuffer(this._view.buffer)) ;\n      ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n    }\n\n    respondWithNewView(view) {\n      if (!IsReadableStreamBYOBRequest(this)) {\n        throw byobRequestBrandCheckException('respondWithNewView');\n      }\n\n      assertRequiredArgument(view, 1, 'respondWithNewView');\n\n      if (!ArrayBuffer.isView(view)) {\n        throw new TypeError('You can only respond with array buffer views');\n      }\n\n      if (this._associatedReadableByteStreamController === undefined) {\n        throw new TypeError('This BYOB request has been invalidated');\n      }\n\n      if (IsDetachedBuffer(view.buffer)) ;\n      ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n    }\n\n  }\n\n  Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n    respond: {\n      enumerable: true\n    },\n    respondWithNewView: {\n      enumerable: true\n    },\n    view: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBRequest',\n      configurable: true\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n\n  class ReadableByteStreamController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the current BYOB pull request, or `null` if there isn't one.\n     */\n\n\n    get byobRequest() {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('byobRequest');\n      }\n\n      return ReadableByteStreamControllerGetBYOBRequest(this);\n    }\n    /**\n     * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n     * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n     */\n\n\n    get desiredSize() {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('desiredSize');\n      }\n\n      return ReadableByteStreamControllerGetDesiredSize(this);\n    }\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n\n\n    close() {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('close');\n      }\n\n      if (this._closeRequested) {\n        throw new TypeError('The stream has already been closed; do not close it again!');\n      }\n\n      const state = this._controlledReadableByteStream._state;\n\n      if (state !== 'readable') {\n        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n      }\n\n      ReadableByteStreamControllerClose(this);\n    }\n\n    enqueue(chunk) {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('enqueue');\n      }\n\n      assertRequiredArgument(chunk, 1, 'enqueue');\n\n      if (!ArrayBuffer.isView(chunk)) {\n        throw new TypeError('chunk must be an array buffer view');\n      }\n\n      if (chunk.byteLength === 0) {\n        throw new TypeError('chunk must have non-zero byteLength');\n      }\n\n      if (chunk.buffer.byteLength === 0) {\n        throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n      }\n\n      if (this._closeRequested) {\n        throw new TypeError('stream is closed or draining');\n      }\n\n      const state = this._controlledReadableByteStream._state;\n\n      if (state !== 'readable') {\n        throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n      }\n\n      ReadableByteStreamControllerEnqueue(this, chunk);\n    }\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n\n\n    error(e = undefined) {\n      if (!IsReadableByteStreamController(this)) {\n        throw byteStreamControllerBrandCheckException('error');\n      }\n\n      ReadableByteStreamControllerError(this, e);\n    }\n    /** @internal */\n\n\n    [CancelSteps](reason) {\n      ReadableByteStreamControllerClearPendingPullIntos(this);\n      ResetQueue(this);\n\n      const result = this._cancelAlgorithm(reason);\n\n      ReadableByteStreamControllerClearAlgorithms(this);\n      return result;\n    }\n    /** @internal */\n\n\n    [PullSteps](readRequest) {\n      const stream = this._controlledReadableByteStream;\n\n      if (this._queueTotalSize > 0) {\n        const entry = this._queue.shift();\n\n        this._queueTotalSize -= entry.byteLength;\n        ReadableByteStreamControllerHandleQueueDrain(this);\n        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n        readRequest._chunkSteps(view);\n\n        return;\n      }\n\n      const autoAllocateChunkSize = this._autoAllocateChunkSize;\n\n      if (autoAllocateChunkSize !== undefined) {\n        let buffer;\n\n        try {\n          buffer = new ArrayBuffer(autoAllocateChunkSize);\n        } catch (bufferE) {\n          readRequest._errorSteps(bufferE);\n\n          return;\n        }\n\n        const pullIntoDescriptor = {\n          buffer,\n          bufferByteLength: autoAllocateChunkSize,\n          byteOffset: 0,\n          byteLength: autoAllocateChunkSize,\n          bytesFilled: 0,\n          elementSize: 1,\n          viewConstructor: Uint8Array,\n          readerType: 'default'\n        };\n\n        this._pendingPullIntos.push(pullIntoDescriptor);\n      }\n\n      ReadableStreamAddReadRequest(stream, readRequest);\n      ReadableByteStreamControllerCallPullIfNeeded(this);\n    }\n\n  }\n\n  Object.defineProperties(ReadableByteStreamController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    byobRequest: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableByteStreamController',\n      configurable: true\n    });\n  } // Abstract operations for the ReadableByteStreamController.\n\n\n  function IsReadableByteStreamController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n      return false;\n    }\n\n    return x instanceof ReadableByteStreamController;\n  }\n\n  function IsReadableStreamBYOBRequest(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamBYOBRequest;\n  }\n\n  function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n    const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n\n    if (!shouldPull) {\n      return;\n    }\n\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n\n    controller._pulling = true; // TODO: Test controller argument\n\n    const pullPromise = controller._pullAlgorithm();\n\n    uponPromise(pullPromise, () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    }, e => {\n      ReadableByteStreamControllerError(controller, e);\n    });\n  }\n\n  function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    controller._pendingPullIntos = new SimpleQueue();\n  }\n\n  function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n    let done = false;\n\n    if (stream._state === 'closed') {\n      done = true;\n    }\n\n    const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\n    if (pullIntoDescriptor.readerType === 'default') {\n      ReadableStreamFulfillReadRequest(stream, filledView, done);\n    } else {\n      ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n    }\n  }\n\n  function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n    const bytesFilled = pullIntoDescriptor.bytesFilled;\n    const elementSize = pullIntoDescriptor.elementSize;\n    return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n  }\n\n  function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n    controller._queue.push({\n      buffer,\n      byteOffset,\n      byteLength\n    });\n\n    controller._queueTotalSize += byteLength;\n  }\n\n  function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n    const elementSize = pullIntoDescriptor.elementSize;\n    const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n    const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n    const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n    const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n    let totalBytesToCopyRemaining = maxBytesToCopy;\n    let ready = false;\n\n    if (maxAlignedBytes > currentAlignedBytes) {\n      totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n      ready = true;\n    }\n\n    const queue = controller._queue;\n\n    while (totalBytesToCopyRemaining > 0) {\n      const headOfQueue = queue.peek();\n      const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n      const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n      if (headOfQueue.byteLength === bytesToCopy) {\n        queue.shift();\n      } else {\n        headOfQueue.byteOffset += bytesToCopy;\n        headOfQueue.byteLength -= bytesToCopy;\n      }\n\n      controller._queueTotalSize -= bytesToCopy;\n      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n      totalBytesToCopyRemaining -= bytesToCopy;\n    }\n\n    return ready;\n  }\n\n  function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n    pullIntoDescriptor.bytesFilled += size;\n  }\n\n  function ReadableByteStreamControllerHandleQueueDrain(controller) {\n    if (controller._queueTotalSize === 0 && controller._closeRequested) {\n      ReadableByteStreamControllerClearAlgorithms(controller);\n      ReadableStreamClose(controller._controlledReadableByteStream);\n    } else {\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n  }\n\n  function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n    if (controller._byobRequest === null) {\n      return;\n    }\n\n    controller._byobRequest._associatedReadableByteStreamController = undefined;\n    controller._byobRequest._view = null;\n    controller._byobRequest = null;\n  }\n\n  function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n    while (controller._pendingPullIntos.length > 0) {\n      if (controller._queueTotalSize === 0) {\n        return;\n      }\n\n      const pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n      }\n    }\n  }\n\n  function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n    const stream = controller._controlledReadableByteStream;\n    let elementSize = 1;\n\n    if (view.constructor !== DataView) {\n      elementSize = view.constructor.BYTES_PER_ELEMENT;\n    }\n\n    const ctor = view.constructor; // try {\n\n    const buffer = TransferArrayBuffer(view.buffer); // } catch (e) {\n    //   readIntoRequest._errorSteps(e);\n    //   return;\n    // }\n\n    const pullIntoDescriptor = {\n      buffer,\n      bufferByteLength: buffer.byteLength,\n      byteOffset: view.byteOffset,\n      byteLength: view.byteLength,\n      bytesFilled: 0,\n      elementSize,\n      viewConstructor: ctor,\n      readerType: 'byob'\n    };\n\n    if (controller._pendingPullIntos.length > 0) {\n      controller._pendingPullIntos.push(pullIntoDescriptor); // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n      // - No change happens on desiredSize\n      // - The source has already been notified of that there's at least 1 pending read(view)\n\n\n      ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n      return;\n    }\n\n    if (stream._state === 'closed') {\n      const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n\n      readIntoRequest._closeSteps(emptyView);\n\n      return;\n    }\n\n    if (controller._queueTotalSize > 0) {\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        ReadableByteStreamControllerHandleQueueDrain(controller);\n\n        readIntoRequest._chunkSteps(filledView);\n\n        return;\n      }\n\n      if (controller._closeRequested) {\n        const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n\n        readIntoRequest._errorSteps(e);\n\n        return;\n      }\n    }\n\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n    const stream = controller._controlledReadableByteStream;\n\n    if (ReadableStreamHasBYOBReader(stream)) {\n      while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n        const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n      }\n    }\n  }\n\n  function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n    if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n      return;\n    }\n\n    ReadableByteStreamControllerShiftPendingPullInto(controller);\n    const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n\n    if (remainderSize > 0) {\n      const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n    }\n\n    pullIntoDescriptor.bytesFilled -= remainderSize;\n    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  }\n\n  function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    const state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      ReadableByteStreamControllerRespondInClosedState(controller);\n    } else {\n      ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n    }\n\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n    const descriptor = controller._pendingPullIntos.shift();\n\n    return descriptor;\n  }\n\n  function ReadableByteStreamControllerShouldCallPull(controller) {\n    const stream = controller._controlledReadableByteStream;\n\n    if (stream._state !== 'readable') {\n      return false;\n    }\n\n    if (controller._closeRequested) {\n      return false;\n    }\n\n    if (!controller._started) {\n      return false;\n    }\n\n    if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n\n    if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      return true;\n    }\n\n    const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n\n    if (desiredSize > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function ReadableByteStreamControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n  } // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\n\n  function ReadableByteStreamControllerClose(controller) {\n    const stream = controller._controlledReadableByteStream;\n\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n\n    if (controller._queueTotalSize > 0) {\n      controller._closeRequested = true;\n      return;\n    }\n\n    if (controller._pendingPullIntos.length > 0) {\n      const firstPendingPullInto = controller._pendingPullIntos.peek();\n\n      if (firstPendingPullInto.bytesFilled > 0) {\n        const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n        throw e;\n      }\n    }\n\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n\n  function ReadableByteStreamControllerEnqueue(controller, chunk) {\n    const stream = controller._controlledReadableByteStream;\n\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n\n    const buffer = chunk.buffer;\n    const byteOffset = chunk.byteOffset;\n    const byteLength = chunk.byteLength;\n    const transferredBuffer = TransferArrayBuffer(buffer);\n\n    if (controller._pendingPullIntos.length > 0) {\n      const firstPendingPullInto = controller._pendingPullIntos.peek();\n\n      if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n      firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n    }\n\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n    if (ReadableStreamHasDefaultReader(stream)) {\n      if (ReadableStreamGetNumReadRequests(stream) === 0) {\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      } else {\n        if (controller._pendingPullIntos.length > 0) {\n          ReadableByteStreamControllerShiftPendingPullInto(controller);\n        }\n\n        const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n      }\n    } else if (ReadableStreamHasBYOBReader(stream)) {\n      // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    } else {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    }\n\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerError(controller, e) {\n    const stream = controller._controlledReadableByteStream;\n\n    if (stream._state !== 'readable') {\n      return;\n    }\n\n    ReadableByteStreamControllerClearPendingPullIntos(controller);\n    ResetQueue(controller);\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n\n  function ReadableByteStreamControllerGetBYOBRequest(controller) {\n    if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n      const firstDescriptor = controller._pendingPullIntos.peek();\n\n      const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n      const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n      controller._byobRequest = byobRequest;\n    }\n\n    return controller._byobRequest;\n  }\n\n  function ReadableByteStreamControllerGetDesiredSize(controller) {\n    const state = controller._controlledReadableByteStream._state;\n\n    if (state === 'errored') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n\n  function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n\n    const state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      if (bytesWritten !== 0) {\n        throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n      }\n    } else {\n      if (bytesWritten === 0) {\n        throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n      }\n\n      if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n        throw new RangeError('bytesWritten out of range');\n      }\n    }\n\n    firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n  }\n\n  function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n    const firstDescriptor = controller._pendingPullIntos.peek();\n\n    const state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      if (view.byteLength !== 0) {\n        throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n      }\n    } else {\n      if (view.byteLength === 0) {\n        throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n      }\n    }\n\n    if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n      throw new RangeError('The region specified by view does not match byobRequest');\n    }\n\n    if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n      throw new RangeError('The buffer of view has different capacity than byobRequest');\n    }\n\n    if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n      throw new RangeError('The region specified by view is larger than byobRequest');\n    }\n\n    const viewByteLength = view.byteLength;\n    firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n  }\n\n  function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n    controller._controlledReadableByteStream = stream;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._byobRequest = null; // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\n    controller._queue = controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._closeRequested = false;\n    controller._started = false;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    controller._autoAllocateChunkSize = autoAllocateChunkSize;\n    controller._pendingPullIntos = new SimpleQueue();\n    stream._readableStreamController = controller;\n    const startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), () => {\n      controller._started = true;\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }, r => {\n      ReadableByteStreamControllerError(controller, r);\n    });\n  }\n\n  function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n    const controller = Object.create(ReadableByteStreamController.prototype);\n\n    let startAlgorithm = () => undefined;\n\n    let pullAlgorithm = () => promiseResolvedWith(undefined);\n\n    let cancelAlgorithm = () => promiseResolvedWith(undefined);\n\n    if (underlyingByteSource.start !== undefined) {\n      startAlgorithm = () => underlyingByteSource.start(controller);\n    }\n\n    if (underlyingByteSource.pull !== undefined) {\n      pullAlgorithm = () => underlyingByteSource.pull(controller);\n    }\n\n    if (underlyingByteSource.cancel !== undefined) {\n      cancelAlgorithm = reason => underlyingByteSource.cancel(reason);\n    }\n\n    const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n\n    if (autoAllocateChunkSize === 0) {\n      throw new TypeError('autoAllocateChunkSize must be greater than 0');\n    }\n\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n  }\n\n  function SetUpReadableStreamBYOBRequest(request, controller, view) {\n    request._associatedReadableByteStreamController = controller;\n    request._view = view;\n  } // Helper functions for the ReadableStreamBYOBRequest.\n\n\n  function byobRequestBrandCheckException(name) {\n    return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n  } // Helper functions for the ReadableByteStreamController.\n\n\n  function byteStreamControllerBrandCheckException(name) {\n    return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamBYOBReader(stream) {\n    return new ReadableStreamBYOBReader(stream);\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  }\n\n  function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n    const reader = stream._reader;\n\n    const readIntoRequest = reader._readIntoRequests.shift();\n\n    if (done) {\n      readIntoRequest._closeSteps(chunk);\n    } else {\n      readIntoRequest._chunkSteps(chunk);\n    }\n  }\n\n  function ReadableStreamGetNumReadIntoRequests(stream) {\n    return stream._reader._readIntoRequests.length;\n  }\n\n  function ReadableStreamHasBYOBReader(stream) {\n    const reader = stream._reader;\n\n    if (reader === undefined) {\n      return false;\n    }\n\n    if (!IsReadableStreamBYOBReader(reader)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * A BYOB reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n\n\n  class ReadableStreamBYOBReader {\n    constructor(stream) {\n      assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n      assertReadableStream(stream, 'First parameter');\n\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n\n      if (!IsReadableByteStreamController(stream._readableStreamController)) {\n        throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' + 'source');\n      }\n\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readIntoRequests = new SimpleQueue();\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n     * the reader's lock is released before the stream finishes closing.\n     */\n\n\n    get closed() {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n      }\n\n      return this._closedPromise;\n    }\n    /**\n     * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n     */\n\n\n    cancel(reason = undefined) {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('cancel'));\n      }\n\n      return ReadableStreamReaderGenericCancel(this, reason);\n    }\n    /**\n     * Attempts to reads bytes into view, and returns a promise resolved with the result.\n     *\n     * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n     */\n\n\n    read(view) {\n      if (!IsReadableStreamBYOBReader(this)) {\n        return promiseRejectedWith(byobReaderBrandCheckException('read'));\n      }\n\n      if (!ArrayBuffer.isView(view)) {\n        return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n      }\n\n      if (view.byteLength === 0) {\n        return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n      }\n\n      if (view.buffer.byteLength === 0) {\n        return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n      }\n\n      if (IsDetachedBuffer(view.buffer)) ;\n\n      if (this._ownerReadableStream === undefined) {\n        return promiseRejectedWith(readerLockException('read from'));\n      }\n\n      let resolvePromise;\n      let rejectPromise;\n      const promise = newPromise((resolve, reject) => {\n        resolvePromise = resolve;\n        rejectPromise = reject;\n      });\n      const readIntoRequest = {\n        _chunkSteps: chunk => resolvePromise({\n          value: chunk,\n          done: false\n        }),\n        _closeSteps: chunk => resolvePromise({\n          value: chunk,\n          done: true\n        }),\n        _errorSteps: e => rejectPromise(e)\n      };\n      ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n      return promise;\n    }\n    /**\n     * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n     * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n     * from now on; otherwise, the reader will appear closed.\n     *\n     * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n     * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n     * do so will throw a `TypeError` and leave the reader locked to the stream.\n     */\n\n\n    releaseLock() {\n      if (!IsReadableStreamBYOBReader(this)) {\n        throw byobReaderBrandCheckException('releaseLock');\n      }\n\n      if (this._ownerReadableStream === undefined) {\n        return;\n      }\n\n      if (this._readIntoRequests.length > 0) {\n        throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n      }\n\n      ReadableStreamReaderGenericRelease(this);\n    }\n\n  }\n\n  Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBReader',\n      configurable: true\n    });\n  } // Abstract operations for the readers.\n\n\n  function IsReadableStreamBYOBReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamBYOBReader;\n  }\n\n  function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n    const stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n\n    if (stream._state === 'errored') {\n      readIntoRequest._errorSteps(stream._storedError);\n    } else {\n      ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n    }\n  } // Helper functions for the ReadableStreamBYOBReader.\n\n\n  function byobReaderBrandCheckException(name) {\n    return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n  }\n\n  function ExtractHighWaterMark(strategy, defaultHWM) {\n    const {\n      highWaterMark\n    } = strategy;\n\n    if (highWaterMark === undefined) {\n      return defaultHWM;\n    }\n\n    if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n      throw new RangeError('Invalid highWaterMark');\n    }\n\n    return highWaterMark;\n  }\n\n  function ExtractSizeAlgorithm(strategy) {\n    const {\n      size\n    } = strategy;\n\n    if (!size) {\n      return () => 1;\n    }\n\n    return size;\n  }\n\n  function convertQueuingStrategy(init, context) {\n    assertDictionary(init, context);\n    const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    const size = init === null || init === void 0 ? void 0 : init.size;\n    return {\n      highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n      size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n    };\n  }\n\n  function convertQueuingStrategySize(fn, context) {\n    assertFunction(fn, context);\n    return chunk => convertUnrestrictedDouble(fn(chunk));\n  }\n\n  function convertUnderlyingSink(original, context) {\n    assertDictionary(original, context);\n    const abort = original === null || original === void 0 ? void 0 : original.abort;\n    const close = original === null || original === void 0 ? void 0 : original.close;\n    const start = original === null || original === void 0 ? void 0 : original.start;\n    const type = original === null || original === void 0 ? void 0 : original.type;\n    const write = original === null || original === void 0 ? void 0 : original.write;\n    return {\n      abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n      close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n      start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n      write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n      type\n    };\n  }\n\n  function convertUnderlyingSinkAbortCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return reason => promiseCall(fn, original, [reason]);\n  }\n\n  function convertUnderlyingSinkCloseCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return () => promiseCall(fn, original, []);\n  }\n\n  function convertUnderlyingSinkStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => reflectCall(fn, original, [controller]);\n  }\n\n  function convertUnderlyingSinkWriteCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n  }\n\n  function assertWritableStream(x, context) {\n    if (!IsWritableStream(x)) {\n      throw new TypeError(`${context} is not a WritableStream.`);\n    }\n  }\n\n  function isAbortSignal(value) {\n    if (typeof value !== 'object' || value === null) {\n      return false;\n    }\n\n    try {\n      return typeof value.aborted === 'boolean';\n    } catch (_a) {\n      // AbortSignal.prototype.aborted throws if its brand check fails\n      return false;\n    }\n  }\n\n  const supportsAbortController = typeof AbortController === 'function';\n  /**\n   * Construct a new AbortController, if supported by the platform.\n   *\n   * @internal\n   */\n\n  function createAbortController() {\n    if (supportsAbortController) {\n      return new AbortController();\n    }\n\n    return undefined;\n  }\n  /**\n   * A writable stream represents a destination for data, into which you can write.\n   *\n   * @public\n   */\n\n\n  class WritableStream {\n    constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\n      if (rawUnderlyingSink === undefined) {\n        rawUnderlyingSink = null;\n      } else {\n        assertObject(rawUnderlyingSink, 'First parameter');\n      }\n\n      const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n      InitializeWritableStream(this);\n      const type = underlyingSink.type;\n\n      if (type !== undefined) {\n        throw new RangeError('Invalid type is specified');\n      }\n\n      const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      const highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n    }\n    /**\n     * Returns whether or not the writable stream is locked to a writer.\n     */\n\n\n    get locked() {\n      if (!IsWritableStream(this)) {\n        throw streamBrandCheckException$2('locked');\n      }\n\n      return IsWritableStreamLocked(this);\n    }\n    /**\n     * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n     * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n     * mechanism of the underlying sink.\n     *\n     * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n     * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n     * the stream) if the stream is currently locked.\n     */\n\n\n    abort(reason = undefined) {\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('abort'));\n      }\n\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n      }\n\n      return WritableStreamAbort(this, reason);\n    }\n    /**\n     * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n     * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n     *\n     * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n     * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n     * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n     */\n\n\n    close() {\n      if (!IsWritableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$2('close'));\n      }\n\n      if (IsWritableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n      }\n\n      if (WritableStreamCloseQueuedOrInFlight(this)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n\n      return WritableStreamClose(this);\n    }\n    /**\n     * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n     * is locked, no other writer can be acquired until this one is released.\n     *\n     * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n     * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n     * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n     */\n\n\n    getWriter() {\n      if (!IsWritableStream(this)) {\n        throw streamBrandCheckException$2('getWriter');\n      }\n\n      return AcquireWritableStreamDefaultWriter(this);\n    }\n\n  }\n\n  Object.defineProperties(WritableStream.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    getWriter: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStream',\n      configurable: true\n    });\n  } // Abstract operations for the WritableStream.\n\n\n  function AcquireWritableStreamDefaultWriter(stream) {\n    return new WritableStreamDefaultWriter(stream);\n  } // Throws if and only if startAlgorithm throws.\n\n\n  function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n    const stream = Object.create(WritableStream.prototype);\n    InitializeWritableStream(stream);\n    const controller = Object.create(WritableStreamDefaultController.prototype);\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  }\n\n  function InitializeWritableStream(stream) {\n    stream._state = 'writable'; // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n    // 'erroring' or 'errored'. May be set to an undefined value.\n\n    stream._storedError = undefined;\n    stream._writer = undefined; // Initialize to undefined first because the constructor of the controller checks this\n    // variable to validate the caller.\n\n    stream._writableStreamController = undefined; // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n    // producer without waiting for the queued writes to finish.\n\n    stream._writeRequests = new SimpleQueue(); // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n    // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n\n    stream._inFlightWriteRequest = undefined; // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n    // has been detached.\n\n    stream._closeRequest = undefined; // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n    // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n\n    stream._inFlightCloseRequest = undefined; // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n\n    stream._pendingAbortRequest = undefined; // The backpressure signal set by the controller.\n\n    stream._backpressure = false;\n  }\n\n  function IsWritableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n      return false;\n    }\n\n    return x instanceof WritableStream;\n  }\n\n  function IsWritableStreamLocked(stream) {\n    if (stream._writer === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamAbort(stream, reason) {\n    var _a;\n\n    if (stream._state === 'closed' || stream._state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n\n    stream._writableStreamController._abortReason = reason;\n    (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort(); // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n    // but it doesn't know that signaling abort runs author code that might have changed the state.\n    // Widen the type again by casting to WritableStreamState.\n\n    const state = stream._state;\n\n    if (state === 'closed' || state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (stream._pendingAbortRequest !== undefined) {\n      return stream._pendingAbortRequest._promise;\n    }\n\n    let wasAlreadyErroring = false;\n\n    if (state === 'erroring') {\n      wasAlreadyErroring = true; // reason will not be used, so don't keep a reference to it.\n\n      reason = undefined;\n    }\n\n    const promise = newPromise((resolve, reject) => {\n      stream._pendingAbortRequest = {\n        _promise: undefined,\n        _resolve: resolve,\n        _reject: reject,\n        _reason: reason,\n        _wasAlreadyErroring: wasAlreadyErroring\n      };\n    });\n    stream._pendingAbortRequest._promise = promise;\n\n    if (!wasAlreadyErroring) {\n      WritableStreamStartErroring(stream, reason);\n    }\n\n    return promise;\n  }\n\n  function WritableStreamClose(stream) {\n    const state = stream._state;\n\n    if (state === 'closed' || state === 'errored') {\n      return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n    }\n\n    const promise = newPromise((resolve, reject) => {\n      const closeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n      stream._closeRequest = closeRequest;\n    });\n    const writer = stream._writer;\n\n    if (writer !== undefined && stream._backpressure && state === 'writable') {\n      defaultWriterReadyPromiseResolve(writer);\n    }\n\n    WritableStreamDefaultControllerClose(stream._writableStreamController);\n    return promise;\n  } // WritableStream API exposed for controllers.\n\n\n  function WritableStreamAddWriteRequest(stream) {\n    const promise = newPromise((resolve, reject) => {\n      const writeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n\n      stream._writeRequests.push(writeRequest);\n    });\n    return promise;\n  }\n\n  function WritableStreamDealWithRejection(stream, error) {\n    const state = stream._state;\n\n    if (state === 'writable') {\n      WritableStreamStartErroring(stream, error);\n      return;\n    }\n\n    WritableStreamFinishErroring(stream);\n  }\n\n  function WritableStreamStartErroring(stream, reason) {\n    const controller = stream._writableStreamController;\n    stream._state = 'erroring';\n    stream._storedError = reason;\n    const writer = stream._writer;\n\n    if (writer !== undefined) {\n      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n    }\n\n    if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n      WritableStreamFinishErroring(stream);\n    }\n  }\n\n  function WritableStreamFinishErroring(stream) {\n    stream._state = 'errored';\n\n    stream._writableStreamController[ErrorSteps]();\n\n    const storedError = stream._storedError;\n\n    stream._writeRequests.forEach(writeRequest => {\n      writeRequest._reject(storedError);\n    });\n\n    stream._writeRequests = new SimpleQueue();\n\n    if (stream._pendingAbortRequest === undefined) {\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n\n    const abortRequest = stream._pendingAbortRequest;\n    stream._pendingAbortRequest = undefined;\n\n    if (abortRequest._wasAlreadyErroring) {\n      abortRequest._reject(storedError);\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n\n    const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n\n    uponPromise(promise, () => {\n      abortRequest._resolve();\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    }, reason => {\n      abortRequest._reject(reason);\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n  }\n\n  function WritableStreamFinishInFlightWrite(stream) {\n    stream._inFlightWriteRequest._resolve(undefined);\n\n    stream._inFlightWriteRequest = undefined;\n  }\n\n  function WritableStreamFinishInFlightWriteWithError(stream, error) {\n    stream._inFlightWriteRequest._reject(error);\n\n    stream._inFlightWriteRequest = undefined;\n    WritableStreamDealWithRejection(stream, error);\n  }\n\n  function WritableStreamFinishInFlightClose(stream) {\n    stream._inFlightCloseRequest._resolve(undefined);\n\n    stream._inFlightCloseRequest = undefined;\n    const state = stream._state;\n\n    if (state === 'erroring') {\n      // The error was too late to do anything, so it is ignored.\n      stream._storedError = undefined;\n\n      if (stream._pendingAbortRequest !== undefined) {\n        stream._pendingAbortRequest._resolve();\n\n        stream._pendingAbortRequest = undefined;\n      }\n    }\n\n    stream._state = 'closed';\n    const writer = stream._writer;\n\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseResolve(writer);\n    }\n  }\n\n  function WritableStreamFinishInFlightCloseWithError(stream, error) {\n    stream._inFlightCloseRequest._reject(error);\n\n    stream._inFlightCloseRequest = undefined; // Never execute sink abort() after sink close().\n\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._reject(error);\n\n      stream._pendingAbortRequest = undefined;\n    }\n\n    WritableStreamDealWithRejection(stream, error);\n  } // TODO(ricea): Fix alphabetical order.\n\n\n  function WritableStreamCloseQueuedOrInFlight(stream) {\n    if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamHasOperationMarkedInFlight(stream) {\n    if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamMarkCloseRequestInFlight(stream) {\n    stream._inFlightCloseRequest = stream._closeRequest;\n    stream._closeRequest = undefined;\n  }\n\n  function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n    stream._inFlightWriteRequest = stream._writeRequests.shift();\n  }\n\n  function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n    if (stream._closeRequest !== undefined) {\n      stream._closeRequest._reject(stream._storedError);\n\n      stream._closeRequest = undefined;\n    }\n\n    const writer = stream._writer;\n\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseReject(writer, stream._storedError);\n    }\n  }\n\n  function WritableStreamUpdateBackpressure(stream, backpressure) {\n    const writer = stream._writer;\n\n    if (writer !== undefined && backpressure !== stream._backpressure) {\n      if (backpressure) {\n        defaultWriterReadyPromiseReset(writer);\n      } else {\n        defaultWriterReadyPromiseResolve(writer);\n      }\n    }\n\n    stream._backpressure = backpressure;\n  }\n  /**\n   * A default writer vended by a {@link WritableStream}.\n   *\n   * @public\n   */\n\n\n  class WritableStreamDefaultWriter {\n    constructor(stream) {\n      assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n      assertWritableStream(stream, 'First parameter');\n\n      if (IsWritableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n      }\n\n      this._ownerWritableStream = stream;\n      stream._writer = this;\n      const state = stream._state;\n\n      if (state === 'writable') {\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n          defaultWriterReadyPromiseInitialize(this);\n        } else {\n          defaultWriterReadyPromiseInitializeAsResolved(this);\n        }\n\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'erroring') {\n        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'closed') {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n        defaultWriterClosedPromiseInitializeAsResolved(this);\n      } else {\n        const storedError = stream._storedError;\n        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      }\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n     * the writer’s lock is released before the stream finishes closing.\n     */\n\n\n    get closed() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n      }\n\n      return this._closedPromise;\n    }\n    /**\n     * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n     * A producer can use this information to determine the right amount of data to write.\n     *\n     * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n     * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n     * the writer’s lock is released.\n     */\n\n\n    get desiredSize() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        throw defaultWriterBrandCheckException('desiredSize');\n      }\n\n      if (this._ownerWritableStream === undefined) {\n        throw defaultWriterLockException('desiredSize');\n      }\n\n      return WritableStreamDefaultWriterGetDesiredSize(this);\n    }\n    /**\n     * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n     * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n     * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n     *\n     * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n     * rejected.\n     */\n\n\n    get ready() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n      }\n\n      return this._readyPromise;\n    }\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n     */\n\n\n    abort(reason = undefined) {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n      }\n\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('abort'));\n      }\n\n      return WritableStreamDefaultWriterAbort(this, reason);\n    }\n    /**\n     * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n     */\n\n\n    close() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n      }\n\n      const stream = this._ownerWritableStream;\n\n      if (stream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('close'));\n      }\n\n      if (WritableStreamCloseQueuedOrInFlight(stream)) {\n        return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n      }\n\n      return WritableStreamDefaultWriterClose(this);\n    }\n    /**\n     * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n     * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n     * now on; otherwise, the writer will appear closed.\n     *\n     * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n     * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n     * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n     * other producers from writing in an interleaved manner.\n     */\n\n\n    releaseLock() {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        throw defaultWriterBrandCheckException('releaseLock');\n      }\n\n      const stream = this._ownerWritableStream;\n\n      if (stream === undefined) {\n        return;\n      }\n\n      WritableStreamDefaultWriterRelease(this);\n    }\n\n    write(chunk = undefined) {\n      if (!IsWritableStreamDefaultWriter(this)) {\n        return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n      }\n\n      if (this._ownerWritableStream === undefined) {\n        return promiseRejectedWith(defaultWriterLockException('write to'));\n      }\n\n      return WritableStreamDefaultWriterWrite(this, chunk);\n    }\n\n  }\n\n  Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    write: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    },\n    ready: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultWriter',\n      configurable: true\n    });\n  } // Abstract operations for the WritableStreamDefaultWriter.\n\n\n  function IsWritableStreamDefaultWriter(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n      return false;\n    }\n\n    return x instanceof WritableStreamDefaultWriter;\n  } // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\n\n  function WritableStreamDefaultWriterAbort(writer, reason) {\n    const stream = writer._ownerWritableStream;\n    return WritableStreamAbort(stream, reason);\n  }\n\n  function WritableStreamDefaultWriterClose(writer) {\n    const stream = writer._ownerWritableStream;\n    return WritableStreamClose(stream);\n  }\n\n  function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n    const stream = writer._ownerWritableStream;\n    const state = stream._state;\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    return WritableStreamDefaultWriterClose(writer);\n  }\n\n  function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n    if (writer._closedPromiseState === 'pending') {\n      defaultWriterClosedPromiseReject(writer, error);\n    } else {\n      defaultWriterClosedPromiseResetToRejected(writer, error);\n    }\n  }\n\n  function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n    if (writer._readyPromiseState === 'pending') {\n      defaultWriterReadyPromiseReject(writer, error);\n    } else {\n      defaultWriterReadyPromiseResetToRejected(writer, error);\n    }\n  }\n\n  function WritableStreamDefaultWriterGetDesiredSize(writer) {\n    const stream = writer._ownerWritableStream;\n    const state = stream._state;\n\n    if (state === 'errored' || state === 'erroring') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n  }\n\n  function WritableStreamDefaultWriterRelease(writer) {\n    const stream = writer._ownerWritableStream;\n    const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError); // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n    // rejected until afterwards. This means that simply testing state will not work.\n\n    WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n    stream._writer = undefined;\n    writer._ownerWritableStream = undefined;\n  }\n\n  function WritableStreamDefaultWriterWrite(writer, chunk) {\n    const stream = writer._ownerWritableStream;\n    const controller = stream._writableStreamController;\n    const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n    if (stream !== writer._ownerWritableStream) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    const state = stream._state;\n\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n    }\n\n    if (state === 'erroring') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    const promise = WritableStreamAddWriteRequest(stream);\n    WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n    return promise;\n  }\n\n  const closeSentinel = {};\n  /**\n   * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n  class WritableStreamDefaultController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n     *\n     * @deprecated\n     *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n     *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n     */\n\n\n    get abortReason() {\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('abortReason');\n      }\n\n      return this._abortReason;\n    }\n    /**\n     * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n     */\n\n\n    get signal() {\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('signal');\n      }\n\n      if (this._abortController === undefined) {\n        // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n        // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n        // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n        throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n      }\n\n      return this._abortController.signal;\n    }\n    /**\n     * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n     *\n     * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n     * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n     * normal lifecycle of interactions with the underlying sink.\n     */\n\n\n    error(e = undefined) {\n      if (!IsWritableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$2('error');\n      }\n\n      const state = this._controlledWritableStream._state;\n\n      if (state !== 'writable') {\n        // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n        // just treat it as a no-op.\n        return;\n      }\n\n      WritableStreamDefaultControllerError(this, e);\n    }\n    /** @internal */\n\n\n    [AbortSteps](reason) {\n      const result = this._abortAlgorithm(reason);\n\n      WritableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    }\n    /** @internal */\n\n\n    [ErrorSteps]() {\n      ResetQueue(this);\n    }\n\n  }\n\n  Object.defineProperties(WritableStreamDefaultController.prototype, {\n    abortReason: {\n      enumerable: true\n    },\n    signal: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultController',\n      configurable: true\n    });\n  } // Abstract operations implementing interface required by the WritableStream.\n\n\n  function IsWritableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n      return false;\n    }\n\n    return x instanceof WritableStreamDefaultController;\n  }\n\n  function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledWritableStream = stream;\n    stream._writableStreamController = controller; // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._abortReason = undefined;\n    controller._abortController = createAbortController();\n    controller._started = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._writeAlgorithm = writeAlgorithm;\n    controller._closeAlgorithm = closeAlgorithm;\n    controller._abortAlgorithm = abortAlgorithm;\n    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n    const startResult = startAlgorithm();\n    const startPromise = promiseResolvedWith(startResult);\n    uponPromise(startPromise, () => {\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, r => {\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    });\n  }\n\n  function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n    const controller = Object.create(WritableStreamDefaultController.prototype);\n\n    let startAlgorithm = () => undefined;\n\n    let writeAlgorithm = () => promiseResolvedWith(undefined);\n\n    let closeAlgorithm = () => promiseResolvedWith(undefined);\n\n    let abortAlgorithm = () => promiseResolvedWith(undefined);\n\n    if (underlyingSink.start !== undefined) {\n      startAlgorithm = () => underlyingSink.start(controller);\n    }\n\n    if (underlyingSink.write !== undefined) {\n      writeAlgorithm = chunk => underlyingSink.write(chunk, controller);\n    }\n\n    if (underlyingSink.close !== undefined) {\n      closeAlgorithm = () => underlyingSink.close();\n    }\n\n    if (underlyingSink.abort !== undefined) {\n      abortAlgorithm = reason => underlyingSink.abort(reason);\n    }\n\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n  } // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n\n\n  function WritableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._writeAlgorithm = undefined;\n    controller._closeAlgorithm = undefined;\n    controller._abortAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  }\n\n  function WritableStreamDefaultControllerClose(controller) {\n    EnqueueValueWithSize(controller, closeSentinel, 0);\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }\n\n  function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n    try {\n      return controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n      return 1;\n    }\n  }\n\n  function WritableStreamDefaultControllerGetDesiredSize(controller) {\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n\n  function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n      return;\n    }\n\n    const stream = controller._controlledWritableStream;\n\n    if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n      const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n      WritableStreamUpdateBackpressure(stream, backpressure);\n    }\n\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  } // Abstract operations for the WritableStreamDefaultController.\n\n\n  function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n    const stream = controller._controlledWritableStream;\n\n    if (!controller._started) {\n      return;\n    }\n\n    if (stream._inFlightWriteRequest !== undefined) {\n      return;\n    }\n\n    const state = stream._state;\n\n    if (state === 'erroring') {\n      WritableStreamFinishErroring(stream);\n      return;\n    }\n\n    if (controller._queue.length === 0) {\n      return;\n    }\n\n    const value = PeekQueueValue(controller);\n\n    if (value === closeSentinel) {\n      WritableStreamDefaultControllerProcessClose(controller);\n    } else {\n      WritableStreamDefaultControllerProcessWrite(controller, value);\n    }\n  }\n\n  function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n    if (controller._controlledWritableStream._state === 'writable') {\n      WritableStreamDefaultControllerError(controller, error);\n    }\n  }\n\n  function WritableStreamDefaultControllerProcessClose(controller) {\n    const stream = controller._controlledWritableStream;\n    WritableStreamMarkCloseRequestInFlight(stream);\n    DequeueValue(controller);\n\n    const sinkClosePromise = controller._closeAlgorithm();\n\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    uponPromise(sinkClosePromise, () => {\n      WritableStreamFinishInFlightClose(stream);\n    }, reason => {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    });\n  }\n\n  function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n    const stream = controller._controlledWritableStream;\n    WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n    const sinkWritePromise = controller._writeAlgorithm(chunk);\n\n    uponPromise(sinkWritePromise, () => {\n      WritableStreamFinishInFlightWrite(stream);\n      const state = stream._state;\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, reason => {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    });\n  }\n\n  function WritableStreamDefaultControllerGetBackpressure(controller) {\n    const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n    return desiredSize <= 0;\n  } // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\n\n  function WritableStreamDefaultControllerError(controller, error) {\n    const stream = controller._controlledWritableStream;\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    WritableStreamStartErroring(stream, error);\n  } // Helper functions for the WritableStream.\n\n\n  function streamBrandCheckException$2(name) {\n    return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n  } // Helper functions for the WritableStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException$2(name) {\n    return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n  } // Helper functions for the WritableStreamDefaultWriter.\n\n\n  function defaultWriterBrandCheckException(name) {\n    return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n  }\n\n  function defaultWriterLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released writer');\n  }\n\n  function defaultWriterClosedPromiseInitialize(writer) {\n    writer._closedPromise = newPromise((resolve, reject) => {\n      writer._closedPromise_resolve = resolve;\n      writer._closedPromise_reject = reject;\n      writer._closedPromiseState = 'pending';\n    });\n  }\n\n  function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseReject(writer, reason);\n  }\n\n  function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  function defaultWriterClosedPromiseReject(writer, reason) {\n    if (writer._closedPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(writer._closedPromise);\n\n    writer._closedPromise_reject(reason);\n\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'rejected';\n  }\n\n  function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n    defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n  }\n\n  function defaultWriterClosedPromiseResolve(writer) {\n    if (writer._closedPromise_resolve === undefined) {\n      return;\n    }\n\n    writer._closedPromise_resolve(undefined);\n\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'resolved';\n  }\n\n  function defaultWriterReadyPromiseInitialize(writer) {\n    writer._readyPromise = newPromise((resolve, reject) => {\n      writer._readyPromise_resolve = resolve;\n      writer._readyPromise_reject = reject;\n    });\n    writer._readyPromiseState = 'pending';\n  }\n\n  function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseReject(writer, reason);\n  }\n\n  function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  function defaultWriterReadyPromiseReject(writer, reason) {\n    if (writer._readyPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(writer._readyPromise);\n\n    writer._readyPromise_reject(reason);\n\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'rejected';\n  }\n\n  function defaultWriterReadyPromiseReset(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n  }\n\n  function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n    defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n  }\n\n  function defaultWriterReadyPromiseResolve(writer) {\n    if (writer._readyPromise_resolve === undefined) {\n      return;\n    }\n\n    writer._readyPromise_resolve(undefined);\n\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'fulfilled';\n  } /// <reference lib=\"dom\" />\n\n\n  const NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined; /// <reference types=\"node\" />\n\n  function isDOMExceptionConstructor(ctor) {\n    if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n      return false;\n    }\n\n    try {\n      new ctor();\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  function createDOMExceptionPolyfill() {\n    // eslint-disable-next-line no-shadow\n    const ctor = function DOMException(message, name) {\n      this.message = message || '';\n      this.name = name || 'Error';\n\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n    };\n\n    ctor.prototype = Object.create(Error.prototype);\n    Object.defineProperty(ctor.prototype, 'constructor', {\n      value: ctor,\n      writable: true,\n      configurable: true\n    });\n    return ctor;\n  } // eslint-disable-next-line no-redeclare\n\n\n  const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\n  function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n    const reader = AcquireReadableStreamDefaultReader(source);\n    const writer = AcquireWritableStreamDefaultWriter(dest);\n    source._disturbed = true;\n    let shuttingDown = false; // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n\n    let currentWrite = promiseResolvedWith(undefined);\n    return newPromise((resolve, reject) => {\n      let abortAlgorithm;\n\n      if (signal !== undefined) {\n        abortAlgorithm = () => {\n          const error = new DOMException$1('Aborted', 'AbortError');\n          const actions = [];\n\n          if (!preventAbort) {\n            actions.push(() => {\n              if (dest._state === 'writable') {\n                return WritableStreamAbort(dest, error);\n              }\n\n              return promiseResolvedWith(undefined);\n            });\n          }\n\n          if (!preventCancel) {\n            actions.push(() => {\n              if (source._state === 'readable') {\n                return ReadableStreamCancel(source, error);\n              }\n\n              return promiseResolvedWith(undefined);\n            });\n          }\n\n          shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n        };\n\n        if (signal.aborted) {\n          abortAlgorithm();\n          return;\n        }\n\n        signal.addEventListener('abort', abortAlgorithm);\n      } // Using reader and writer, read all chunks from this and write them to dest\n      // - Backpressure must be enforced\n      // - Shutdown must stop all activity\n\n\n      function pipeLoop() {\n        return newPromise((resolveLoop, rejectLoop) => {\n          function next(done) {\n            if (done) {\n              resolveLoop();\n            } else {\n              // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n              // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n              PerformPromiseThen(pipeStep(), next, rejectLoop);\n            }\n          }\n\n          next(false);\n        });\n      }\n\n      function pipeStep() {\n        if (shuttingDown) {\n          return promiseResolvedWith(true);\n        }\n\n        return PerformPromiseThen(writer._readyPromise, () => {\n          return newPromise((resolveRead, rejectRead) => {\n            ReadableStreamDefaultReaderRead(reader, {\n              _chunkSteps: chunk => {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: () => resolveRead(true),\n              _errorSteps: rejectRead\n            });\n          });\n        });\n      } // Errors must be propagated forward\n\n\n      isOrBecomesErrored(source, reader._closedPromise, storedError => {\n        if (!preventAbort) {\n          shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      }); // Errors must be propagated backward\n\n      isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n        if (!preventCancel) {\n          shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      }); // Closing must be propagated forward\n\n      isOrBecomesClosed(source, reader._closedPromise, () => {\n        if (!preventClose) {\n          shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n        } else {\n          shutdown();\n        }\n      }); // Closing must be propagated backward\n\n      if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n        const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n        if (!preventCancel) {\n          shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n        } else {\n          shutdown(true, destClosed);\n        }\n      }\n\n      setPromiseIsHandledToTrue(pipeLoop());\n\n      function waitForWritesToFinish() {\n        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n        // for that too.\n        const oldCurrentWrite = currentWrite;\n        return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n      }\n\n      function isOrBecomesErrored(stream, promise, action) {\n        if (stream._state === 'errored') {\n          action(stream._storedError);\n        } else {\n          uponRejection(promise, action);\n        }\n      }\n\n      function isOrBecomesClosed(stream, promise, action) {\n        if (stream._state === 'closed') {\n          action();\n        } else {\n          uponFulfillment(promise, action);\n        }\n      }\n\n      function shutdownWithAction(action, originalIsError, originalError) {\n        if (shuttingDown) {\n          return;\n        }\n\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), doTheRest);\n        } else {\n          doTheRest();\n        }\n\n        function doTheRest() {\n          uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));\n        }\n      }\n\n      function shutdown(isError, error) {\n        if (shuttingDown) {\n          return;\n        }\n\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n        } else {\n          finalize(isError, error);\n        }\n      }\n\n      function finalize(isError, error) {\n        WritableStreamDefaultWriterRelease(writer);\n        ReadableStreamReaderGenericRelease(reader);\n\n        if (signal !== undefined) {\n          signal.removeEventListener('abort', abortAlgorithm);\n        }\n\n        if (isError) {\n          reject(error);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n\n  class ReadableStreamDefaultController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n     * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n     */\n\n\n    get desiredSize() {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('desiredSize');\n      }\n\n      return ReadableStreamDefaultControllerGetDesiredSize(this);\n    }\n    /**\n     * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n     * the stream, but once those are read, the stream will become closed.\n     */\n\n\n    close() {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('close');\n      }\n\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits close');\n      }\n\n      ReadableStreamDefaultControllerClose(this);\n    }\n\n    enqueue(chunk = undefined) {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('enqueue');\n      }\n\n      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n        throw new TypeError('The stream is not in a state that permits enqueue');\n      }\n\n      return ReadableStreamDefaultControllerEnqueue(this, chunk);\n    }\n    /**\n     * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n     */\n\n\n    error(e = undefined) {\n      if (!IsReadableStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException$1('error');\n      }\n\n      ReadableStreamDefaultControllerError(this, e);\n    }\n    /** @internal */\n\n\n    [CancelSteps](reason) {\n      ResetQueue(this);\n\n      const result = this._cancelAlgorithm(reason);\n\n      ReadableStreamDefaultControllerClearAlgorithms(this);\n      return result;\n    }\n    /** @internal */\n\n\n    [PullSteps](readRequest) {\n      const stream = this._controlledReadableStream;\n\n      if (this._queue.length > 0) {\n        const chunk = DequeueValue(this);\n\n        if (this._closeRequested && this._queue.length === 0) {\n          ReadableStreamDefaultControllerClearAlgorithms(this);\n          ReadableStreamClose(stream);\n        } else {\n          ReadableStreamDefaultControllerCallPullIfNeeded(this);\n        }\n\n        readRequest._chunkSteps(chunk);\n      } else {\n        ReadableStreamAddReadRequest(stream, readRequest);\n        ReadableStreamDefaultControllerCallPullIfNeeded(this);\n      }\n    }\n\n  }\n\n  Object.defineProperties(ReadableStreamDefaultController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultController',\n      configurable: true\n    });\n  } // Abstract operations for the ReadableStreamDefaultController.\n\n\n  function IsReadableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamDefaultController;\n  }\n\n  function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n    const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n\n    if (!shouldPull) {\n      return;\n    }\n\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n\n    controller._pulling = true;\n\n    const pullPromise = controller._pullAlgorithm();\n\n    uponPromise(pullPromise, () => {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    }, e => {\n      ReadableStreamDefaultControllerError(controller, e);\n    });\n  }\n\n  function ReadableStreamDefaultControllerShouldCallPull(controller) {\n    const stream = controller._controlledReadableStream;\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return false;\n    }\n\n    if (!controller._started) {\n      return false;\n    }\n\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n\n    const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n\n    if (desiredSize > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  } // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\n\n  function ReadableStreamDefaultControllerClose(controller) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n\n    const stream = controller._controlledReadableStream;\n    controller._closeRequested = true;\n\n    if (controller._queue.length === 0) {\n      ReadableStreamDefaultControllerClearAlgorithms(controller);\n      ReadableStreamClose(stream);\n    }\n  }\n\n  function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n\n    const stream = controller._controlledReadableStream;\n\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      ReadableStreamFulfillReadRequest(stream, chunk, false);\n    } else {\n      let chunkSize;\n\n      try {\n        chunkSize = controller._strategySizeAlgorithm(chunk);\n      } catch (chunkSizeE) {\n        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n        throw chunkSizeE;\n      }\n\n      try {\n        EnqueueValueWithSize(controller, chunk, chunkSize);\n      } catch (enqueueE) {\n        ReadableStreamDefaultControllerError(controller, enqueueE);\n        throw enqueueE;\n      }\n    }\n\n    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableStreamDefaultControllerError(controller, e) {\n    const stream = controller._controlledReadableStream;\n\n    if (stream._state !== 'readable') {\n      return;\n    }\n\n    ResetQueue(controller);\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n\n  function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n    const state = controller._controlledReadableStream._state;\n\n    if (state === 'errored') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return controller._strategyHWM - controller._queueTotalSize;\n  } // This is used in the implementation of TransformStream.\n\n\n  function ReadableStreamDefaultControllerHasBackpressure(controller) {\n    if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n    const state = controller._controlledReadableStream._state;\n\n    if (!controller._closeRequested && state === 'readable') {\n      return true;\n    }\n\n    return false;\n  }\n\n  function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledReadableStream = stream;\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._started = false;\n    controller._closeRequested = false;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    stream._readableStreamController = controller;\n    const startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), () => {\n      controller._started = true;\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }, r => {\n      ReadableStreamDefaultControllerError(controller, r);\n    });\n  }\n\n  function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n    const controller = Object.create(ReadableStreamDefaultController.prototype);\n\n    let startAlgorithm = () => undefined;\n\n    let pullAlgorithm = () => promiseResolvedWith(undefined);\n\n    let cancelAlgorithm = () => promiseResolvedWith(undefined);\n\n    if (underlyingSource.start !== undefined) {\n      startAlgorithm = () => underlyingSource.start(controller);\n    }\n\n    if (underlyingSource.pull !== undefined) {\n      pullAlgorithm = () => underlyingSource.pull(controller);\n    }\n\n    if (underlyingSource.cancel !== undefined) {\n      cancelAlgorithm = reason => underlyingSource.cancel(reason);\n    }\n\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n  } // Helper functions for the ReadableStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException$1(name) {\n    return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n  }\n\n  function ReadableStreamTee(stream, cloneForBranch2) {\n    if (IsReadableByteStreamController(stream._readableStreamController)) {\n      return ReadableByteStreamTee(stream);\n    }\n\n    return ReadableStreamDefaultTee(stream);\n  }\n\n  function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n    const reader = AcquireReadableStreamDefaultReader(stream);\n    let reading = false;\n    let readAgain = false;\n    let canceled1 = false;\n    let canceled2 = false;\n    let reason1;\n    let reason2;\n    let branch1;\n    let branch2;\n    let resolveCancelPromise;\n    const cancelPromise = newPromise(resolve => {\n      resolveCancelPromise = resolve;\n    });\n\n    function pullAlgorithm() {\n      if (reading) {\n        readAgain = true;\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      const readRequest = {\n        _chunkSteps: chunk => {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(() => {\n            readAgain = false;\n            const chunk1 = chunk;\n            const chunk2 = chunk; // There is no way to access the cloning code right now in the reference implementation.\n            // If we add one then we'll need an implementation for serializable objects.\n            // if (!canceled2 && cloneForBranch2) {\n            //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n            // }\n\n            if (!canceled1) {\n              ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n\n            if (!canceled2) {\n              ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n\n            reading = false;\n\n            if (readAgain) {\n              pullAlgorithm();\n            }\n          });\n        },\n        _closeSteps: () => {\n          reading = false;\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n          }\n\n          if (!canceled2) {\n            ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n          }\n\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: () => {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promiseResolvedWith(undefined);\n    }\n\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n\n      if (canceled2) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n\n      if (canceled1) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function startAlgorithm() {// do nothing\n    }\n\n    branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n    branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n    uponRejection(reader._closedPromise, r => {\n      ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n      ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n    return [branch1, branch2];\n  }\n\n  function ReadableByteStreamTee(stream) {\n    let reader = AcquireReadableStreamDefaultReader(stream);\n    let reading = false;\n    let readAgainForBranch1 = false;\n    let readAgainForBranch2 = false;\n    let canceled1 = false;\n    let canceled2 = false;\n    let reason1;\n    let reason2;\n    let branch1;\n    let branch2;\n    let resolveCancelPromise;\n    const cancelPromise = newPromise(resolve => {\n      resolveCancelPromise = resolve;\n    });\n\n    function forwardReaderError(thisReader) {\n      uponRejection(thisReader._closedPromise, r => {\n        if (thisReader !== reader) {\n          return;\n        }\n\n        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      });\n    }\n\n    function pullWithDefaultReader() {\n      if (IsReadableStreamBYOBReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamDefaultReader(stream);\n        forwardReaderError(reader);\n      }\n\n      const readRequest = {\n        _chunkSteps: chunk => {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(() => {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            const chunk1 = chunk;\n            let chunk2 = chunk;\n\n            if (!canceled1 && !canceled2) {\n              try {\n                chunk2 = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n            }\n\n            if (!canceled1) {\n              ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n\n            if (!canceled2) {\n              ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n\n            reading = false;\n\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: () => {\n          reading = false;\n\n          if (!canceled1) {\n            ReadableByteStreamControllerClose(branch1._readableStreamController);\n          }\n\n          if (!canceled2) {\n            ReadableByteStreamControllerClose(branch2._readableStreamController);\n          }\n\n          if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n          }\n\n          if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n          }\n\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: () => {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n    }\n\n    function pullWithBYOBReader(view, forBranch2) {\n      if (IsReadableStreamDefaultReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamBYOBReader(stream);\n        forwardReaderError(reader);\n      }\n\n      const byobBranch = forBranch2 ? branch2 : branch1;\n      const otherBranch = forBranch2 ? branch1 : branch2;\n      const readIntoRequest = {\n        _chunkSteps: chunk => {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(() => {\n            readAgainForBranch1 = false;\n            readAgainForBranch2 = false;\n            const byobCanceled = forBranch2 ? canceled2 : canceled1;\n            const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n            if (!otherCanceled) {\n              let clonedChunk;\n\n              try {\n                clonedChunk = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n\n              if (!byobCanceled) {\n                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n              }\n\n              ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n            } else if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n\n            reading = false;\n\n            if (readAgainForBranch1) {\n              pull1Algorithm();\n            } else if (readAgainForBranch2) {\n              pull2Algorithm();\n            }\n          });\n        },\n        _closeSteps: chunk => {\n          reading = false;\n          const byobCanceled = forBranch2 ? canceled2 : canceled1;\n          const otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n          }\n\n          if (!otherCanceled) {\n            ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n          }\n\n          if (chunk !== undefined) {\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n\n            if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n              ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n            }\n          }\n\n          if (!byobCanceled || !otherCanceled) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: () => {\n          reading = false;\n        }\n      };\n      ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n    }\n\n    function pull1Algorithm() {\n      if (reading) {\n        readAgainForBranch1 = true;\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, false);\n      }\n\n      return promiseResolvedWith(undefined);\n    }\n\n    function pull2Algorithm() {\n      if (reading) {\n        readAgainForBranch2 = true;\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, true);\n      }\n\n      return promiseResolvedWith(undefined);\n    }\n\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n\n      if (canceled2) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n\n      if (canceled1) {\n        const compositeReason = CreateArrayFromList([reason1, reason2]);\n        const cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function startAlgorithm() {\n      return;\n    }\n\n    branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n    branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n    forwardReaderError(reader);\n    return [branch1, branch2];\n  }\n\n  function convertUnderlyingDefaultOrByteSource(source, context) {\n    assertDictionary(source, context);\n    const original = source;\n    const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n    const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n    const pull = original === null || original === void 0 ? void 0 : original.pull;\n    const start = original === null || original === void 0 ? void 0 : original.start;\n    const type = original === null || original === void 0 ? void 0 : original.type;\n    return {\n      autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n      cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n      pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n      start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n      type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n    };\n  }\n\n  function convertUnderlyingSourceCancelCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return reason => promiseCall(fn, original, [reason]);\n  }\n\n  function convertUnderlyingSourcePullCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => promiseCall(fn, original, [controller]);\n  }\n\n  function convertUnderlyingSourceStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => reflectCall(fn, original, [controller]);\n  }\n\n  function convertReadableStreamType(type, context) {\n    type = `${type}`;\n\n    if (type !== 'bytes') {\n      throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n    }\n\n    return type;\n  }\n\n  function convertReaderOptions(options, context) {\n    assertDictionary(options, context);\n    const mode = options === null || options === void 0 ? void 0 : options.mode;\n    return {\n      mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n    };\n  }\n\n  function convertReadableStreamReaderMode(mode, context) {\n    mode = `${mode}`;\n\n    if (mode !== 'byob') {\n      throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n    }\n\n    return mode;\n  }\n\n  function convertIteratorOptions(options, context) {\n    assertDictionary(options, context);\n    const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    return {\n      preventCancel: Boolean(preventCancel)\n    };\n  }\n\n  function convertPipeOptions(options, context) {\n    assertDictionary(options, context);\n    const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n    const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n\n    if (signal !== undefined) {\n      assertAbortSignal(signal, `${context} has member 'signal' that`);\n    }\n\n    return {\n      preventAbort: Boolean(preventAbort),\n      preventCancel: Boolean(preventCancel),\n      preventClose: Boolean(preventClose),\n      signal\n    };\n  }\n\n  function assertAbortSignal(signal, context) {\n    if (!isAbortSignal(signal)) {\n      throw new TypeError(`${context} is not an AbortSignal.`);\n    }\n  }\n\n  function convertReadableWritablePair(pair, context) {\n    assertDictionary(pair, context);\n    const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n    assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n    assertReadableStream(readable, `${context} has member 'readable' that`);\n    const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n    assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n    assertWritableStream(writable, `${context} has member 'writable' that`);\n    return {\n      readable,\n      writable\n    };\n  }\n  /**\n   * A readable stream represents a source of data, from which you can read.\n   *\n   * @public\n   */\n\n\n  class ReadableStream {\n    constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\n      if (rawUnderlyingSource === undefined) {\n        rawUnderlyingSource = null;\n      } else {\n        assertObject(rawUnderlyingSource, 'First parameter');\n      }\n\n      const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n      InitializeReadableStream(this);\n\n      if (underlyingSource.type === 'bytes') {\n        if (strategy.size !== undefined) {\n          throw new RangeError('The strategy for a byte stream cannot have a size function');\n        }\n\n        const highWaterMark = ExtractHighWaterMark(strategy, 0);\n        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n      } else {\n        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n        const highWaterMark = ExtractHighWaterMark(strategy, 1);\n        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n      }\n    }\n    /**\n     * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n     */\n\n\n    get locked() {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('locked');\n      }\n\n      return IsReadableStreamLocked(this);\n    }\n    /**\n     * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n     *\n     * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n     * method, which might or might not use it.\n     */\n\n\n    cancel(reason = undefined) {\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n      }\n\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n      }\n\n      return ReadableStreamCancel(this, reason);\n    }\n\n    getReader(rawOptions = undefined) {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('getReader');\n      }\n\n      const options = convertReaderOptions(rawOptions, 'First parameter');\n\n      if (options.mode === undefined) {\n        return AcquireReadableStreamDefaultReader(this);\n      }\n\n      return AcquireReadableStreamBYOBReader(this);\n    }\n\n    pipeThrough(rawTransform, rawOptions = {}) {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('pipeThrough');\n      }\n\n      assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n      const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n      const options = convertPipeOptions(rawOptions, 'Second parameter');\n\n      if (IsReadableStreamLocked(this)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n      }\n\n      if (IsWritableStreamLocked(transform.writable)) {\n        throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n      }\n\n      const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n      setPromiseIsHandledToTrue(promise);\n      return transform.readable;\n    }\n\n    pipeTo(destination, rawOptions = {}) {\n      if (!IsReadableStream(this)) {\n        return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n      }\n\n      if (destination === undefined) {\n        return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n      }\n\n      if (!IsWritableStream(destination)) {\n        return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n      }\n\n      let options;\n\n      try {\n        options = convertPipeOptions(rawOptions, 'Second parameter');\n      } catch (e) {\n        return promiseRejectedWith(e);\n      }\n\n      if (IsReadableStreamLocked(this)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n      }\n\n      if (IsWritableStreamLocked(destination)) {\n        return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n      }\n\n      return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n    }\n    /**\n     * Tees this readable stream, returning a two-element array containing the two resulting branches as\n     * new {@link ReadableStream} instances.\n     *\n     * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n     * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n     * propagated to the stream's underlying source.\n     *\n     * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n     * this could allow interference between the two branches.\n     */\n\n\n    tee() {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('tee');\n      }\n\n      const branches = ReadableStreamTee(this);\n      return CreateArrayFromList(branches);\n    }\n\n    values(rawOptions = undefined) {\n      if (!IsReadableStream(this)) {\n        throw streamBrandCheckException$1('values');\n      }\n\n      const options = convertIteratorOptions(rawOptions, 'First parameter');\n      return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n    }\n\n  }\n\n  Object.defineProperties(ReadableStream.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    getReader: {\n      enumerable: true\n    },\n    pipeThrough: {\n      enumerable: true\n    },\n    pipeTo: {\n      enumerable: true\n    },\n    tee: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStream',\n      configurable: true\n    });\n  }\n\n  if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n      value: ReadableStream.prototype.values,\n      writable: true,\n      configurable: true\n    });\n  } // Abstract operations for the ReadableStream.\n  // Throws if and only if startAlgorithm throws.\n\n\n  function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n    const stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    const controller = Object.create(ReadableStreamDefaultController.prototype);\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  } // Throws if and only if startAlgorithm throws.\n\n\n  function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n    const stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    const controller = Object.create(ReadableByteStreamController.prototype);\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n    return stream;\n  }\n\n  function InitializeReadableStream(stream) {\n    stream._state = 'readable';\n    stream._reader = undefined;\n    stream._storedError = undefined;\n    stream._disturbed = false;\n  }\n\n  function IsReadableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n      return false;\n    }\n\n    return x instanceof ReadableStream;\n  }\n\n  function IsReadableStreamLocked(stream) {\n    if (stream._reader === undefined) {\n      return false;\n    }\n\n    return true;\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamCancel(stream, reason) {\n    stream._disturbed = true;\n\n    if (stream._state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (stream._state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    ReadableStreamClose(stream);\n    const reader = stream._reader;\n\n    if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n      reader._readIntoRequests.forEach(readIntoRequest => {\n        readIntoRequest._closeSteps(undefined);\n      });\n\n      reader._readIntoRequests = new SimpleQueue();\n    }\n\n    const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n\n    return transformPromiseWith(sourceCancelPromise, noop);\n  }\n\n  function ReadableStreamClose(stream) {\n    stream._state = 'closed';\n    const reader = stream._reader;\n\n    if (reader === undefined) {\n      return;\n    }\n\n    defaultReaderClosedPromiseResolve(reader);\n\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(readRequest => {\n        readRequest._closeSteps();\n      });\n\n      reader._readRequests = new SimpleQueue();\n    }\n  }\n\n  function ReadableStreamError(stream, e) {\n    stream._state = 'errored';\n    stream._storedError = e;\n    const reader = stream._reader;\n\n    if (reader === undefined) {\n      return;\n    }\n\n    defaultReaderClosedPromiseReject(reader, e);\n\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(readRequest => {\n        readRequest._errorSteps(e);\n      });\n\n      reader._readRequests = new SimpleQueue();\n    } else {\n      reader._readIntoRequests.forEach(readIntoRequest => {\n        readIntoRequest._errorSteps(e);\n      });\n\n      reader._readIntoRequests = new SimpleQueue();\n    }\n  } // Helper functions for the ReadableStream.\n\n\n  function streamBrandCheckException$1(name) {\n    return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n  }\n\n  function convertQueuingStrategyInit(init, context) {\n    assertDictionary(init, context);\n    const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n    return {\n      highWaterMark: convertUnrestrictedDouble(highWaterMark)\n    };\n  } // The size function must not have a prototype property nor be a constructor\n\n\n  const byteLengthSizeFunction = chunk => {\n    return chunk.byteLength;\n  };\n\n  try {\n    Object.defineProperty(byteLengthSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {// This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of bytes in each chunk.\n   *\n   * @public\n   */\n\n\n  class ByteLengthQueuingStrategy {\n    constructor(options) {\n      assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    /**\n     * Returns the high water mark provided to the constructor.\n     */\n\n\n    get highWaterMark() {\n      if (!IsByteLengthQueuingStrategy(this)) {\n        throw byteLengthBrandCheckException('highWaterMark');\n      }\n\n      return this._byteLengthQueuingStrategyHighWaterMark;\n    }\n    /**\n     * Measures the size of `chunk` by returning the value of its `byteLength` property.\n     */\n\n\n    get size() {\n      if (!IsByteLengthQueuingStrategy(this)) {\n        throw byteLengthBrandCheckException('size');\n      }\n\n      return byteLengthSizeFunction;\n    }\n\n  }\n\n  Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ByteLengthQueuingStrategy',\n      configurable: true\n    });\n  } // Helper functions for the ByteLengthQueuingStrategy.\n\n\n  function byteLengthBrandCheckException(name) {\n    return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n  }\n\n  function IsByteLengthQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n\n    return x instanceof ByteLengthQueuingStrategy;\n  } // The size function must not have a prototype property nor be a constructor\n\n\n  const countSizeFunction = () => {\n    return 1;\n  };\n\n  try {\n    Object.defineProperty(countSizeFunction, 'name', {\n      value: 'size',\n      configurable: true\n    });\n  } catch (_a) {// This property is non-configurable in older browsers, so ignore if this throws.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n  }\n  /**\n   * A queuing strategy that counts the number of chunks.\n   *\n   * @public\n   */\n\n\n  class CountQueuingStrategy {\n    constructor(options) {\n      assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    /**\n     * Returns the high water mark provided to the constructor.\n     */\n\n\n    get highWaterMark() {\n      if (!IsCountQueuingStrategy(this)) {\n        throw countBrandCheckException('highWaterMark');\n      }\n\n      return this._countQueuingStrategyHighWaterMark;\n    }\n    /**\n     * Measures the size of `chunk` by always returning 1.\n     * This ensures that the total queue size is a count of the number of chunks in the queue.\n     */\n\n\n    get size() {\n      if (!IsCountQueuingStrategy(this)) {\n        throw countBrandCheckException('size');\n      }\n\n      return countSizeFunction;\n    }\n\n  }\n\n  Object.defineProperties(CountQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'CountQueuingStrategy',\n      configurable: true\n    });\n  } // Helper functions for the CountQueuingStrategy.\n\n\n  function countBrandCheckException(name) {\n    return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n  }\n\n  function IsCountQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n\n    return x instanceof CountQueuingStrategy;\n  }\n\n  function convertTransformer(original, context) {\n    assertDictionary(original, context);\n    const flush = original === null || original === void 0 ? void 0 : original.flush;\n    const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n    const start = original === null || original === void 0 ? void 0 : original.start;\n    const transform = original === null || original === void 0 ? void 0 : original.transform;\n    const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n    return {\n      flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n      readableType,\n      start: start === undefined ? undefined : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n      transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n      writableType\n    };\n  }\n\n  function convertTransformerFlushCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => promiseCall(fn, original, [controller]);\n  }\n\n  function convertTransformerStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return controller => reflectCall(fn, original, [controller]);\n  }\n\n  function convertTransformerTransformCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n  } // Class TransformStream\n\n  /**\n   * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n   * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n   * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n   * made available for reading from the readable side.\n   *\n   * @public\n   */\n\n\n  class TransformStream {\n    constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\n      if (rawTransformer === undefined) {\n        rawTransformer = null;\n      }\n\n      const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n      const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n      const transformer = convertTransformer(rawTransformer, 'First parameter');\n\n      if (transformer.readableType !== undefined) {\n        throw new RangeError('Invalid readableType specified');\n      }\n\n      if (transformer.writableType !== undefined) {\n        throw new RangeError('Invalid writableType specified');\n      }\n\n      const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n      const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n      const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n      const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n      let startPromise_resolve;\n      const startPromise = newPromise(resolve => {\n        startPromise_resolve = resolve;\n      });\n      InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n      SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n      if (transformer.start !== undefined) {\n        startPromise_resolve(transformer.start(this._transformStreamController));\n      } else {\n        startPromise_resolve(undefined);\n      }\n    }\n    /**\n     * The readable side of the transform stream.\n     */\n\n\n    get readable() {\n      if (!IsTransformStream(this)) {\n        throw streamBrandCheckException('readable');\n      }\n\n      return this._readable;\n    }\n    /**\n     * The writable side of the transform stream.\n     */\n\n\n    get writable() {\n      if (!IsTransformStream(this)) {\n        throw streamBrandCheckException('writable');\n      }\n\n      return this._writable;\n    }\n\n  }\n\n  Object.defineProperties(TransformStream.prototype, {\n    readable: {\n      enumerable: true\n    },\n    writable: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStream',\n      configurable: true\n    });\n  }\n\n  function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n    function startAlgorithm() {\n      return startPromise;\n    }\n\n    function writeAlgorithm(chunk) {\n      return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n    }\n\n    function abortAlgorithm(reason) {\n      return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n    }\n\n    function closeAlgorithm() {\n      return TransformStreamDefaultSinkCloseAlgorithm(stream);\n    }\n\n    stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n\n    function pullAlgorithm() {\n      return TransformStreamDefaultSourcePullAlgorithm(stream);\n    }\n\n    function cancelAlgorithm(reason) {\n      TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n      return promiseResolvedWith(undefined);\n    }\n\n    stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm); // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n\n    stream._backpressure = undefined;\n    stream._backpressureChangePromise = undefined;\n    stream._backpressureChangePromise_resolve = undefined;\n    TransformStreamSetBackpressure(stream, true);\n    stream._transformStreamController = undefined;\n  }\n\n  function IsTransformStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n      return false;\n    }\n\n    return x instanceof TransformStream;\n  } // This is a no-op if both sides are already errored.\n\n\n  function TransformStreamError(stream, e) {\n    ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n  }\n\n  function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n    TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n    WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n\n    if (stream._backpressure) {\n      // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n      // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n      // _backpressure is set.\n      TransformStreamSetBackpressure(stream, false);\n    }\n  }\n\n  function TransformStreamSetBackpressure(stream, backpressure) {\n    // Passes also when called during construction.\n    if (stream._backpressureChangePromise !== undefined) {\n      stream._backpressureChangePromise_resolve();\n    }\n\n    stream._backpressureChangePromise = newPromise(resolve => {\n      stream._backpressureChangePromise_resolve = resolve;\n    });\n    stream._backpressure = backpressure;\n  } // Class TransformStreamDefaultController\n\n  /**\n   * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n   *\n   * @public\n   */\n\n\n  class TransformStreamDefaultController {\n    constructor() {\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n     */\n\n\n    get desiredSize() {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('desiredSize');\n      }\n\n      const readableController = this._controlledTransformStream._readable._readableStreamController;\n      return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n    }\n\n    enqueue(chunk = undefined) {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('enqueue');\n      }\n\n      TransformStreamDefaultControllerEnqueue(this, chunk);\n    }\n    /**\n     * Errors both the readable side and the writable side of the controlled transform stream, making all future\n     * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n     */\n\n\n    error(reason = undefined) {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('error');\n      }\n\n      TransformStreamDefaultControllerError(this, reason);\n    }\n    /**\n     * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n     * transformer only needs to consume a portion of the chunks written to the writable side.\n     */\n\n\n    terminate() {\n      if (!IsTransformStreamDefaultController(this)) {\n        throw defaultControllerBrandCheckException('terminate');\n      }\n\n      TransformStreamDefaultControllerTerminate(this);\n    }\n\n  }\n\n  Object.defineProperties(TransformStreamDefaultController.prototype, {\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    terminate: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n    Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStreamDefaultController',\n      configurable: true\n    });\n  } // Transform Stream Default Controller Abstract Operations\n\n\n  function IsTransformStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n      return false;\n    }\n\n    return x instanceof TransformStreamDefaultController;\n  }\n\n  function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n    controller._controlledTransformStream = stream;\n    stream._transformStreamController = controller;\n    controller._transformAlgorithm = transformAlgorithm;\n    controller._flushAlgorithm = flushAlgorithm;\n  }\n\n  function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n    const controller = Object.create(TransformStreamDefaultController.prototype);\n\n    let transformAlgorithm = chunk => {\n      try {\n        TransformStreamDefaultControllerEnqueue(controller, chunk);\n        return promiseResolvedWith(undefined);\n      } catch (transformResultE) {\n        return promiseRejectedWith(transformResultE);\n      }\n    };\n\n    let flushAlgorithm = () => promiseResolvedWith(undefined);\n\n    if (transformer.transform !== undefined) {\n      transformAlgorithm = chunk => transformer.transform(chunk, controller);\n    }\n\n    if (transformer.flush !== undefined) {\n      flushAlgorithm = () => transformer.flush(controller);\n    }\n\n    SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n  }\n\n  function TransformStreamDefaultControllerClearAlgorithms(controller) {\n    controller._transformAlgorithm = undefined;\n    controller._flushAlgorithm = undefined;\n  }\n\n  function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n    const stream = controller._controlledTransformStream;\n    const readableController = stream._readable._readableStreamController;\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n      throw new TypeError('Readable side is not in a state that permits enqueue');\n    } // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n    // accept TransformStreamDefaultControllerEnqueue() calls.\n\n\n    try {\n      ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n    } catch (e) {\n      // This happens when readableStrategy.size() throws.\n      TransformStreamErrorWritableAndUnblockWrite(stream, e);\n      throw stream._readable._storedError;\n    }\n\n    const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n\n    if (backpressure !== stream._backpressure) {\n      TransformStreamSetBackpressure(stream, true);\n    }\n  }\n\n  function TransformStreamDefaultControllerError(controller, e) {\n    TransformStreamError(controller._controlledTransformStream, e);\n  }\n\n  function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n    const transformPromise = controller._transformAlgorithm(chunk);\n\n    return transformPromiseWith(transformPromise, undefined, r => {\n      TransformStreamError(controller._controlledTransformStream, r);\n      throw r;\n    });\n  }\n\n  function TransformStreamDefaultControllerTerminate(controller) {\n    const stream = controller._controlledTransformStream;\n    const readableController = stream._readable._readableStreamController;\n    ReadableStreamDefaultControllerClose(readableController);\n    const error = new TypeError('TransformStream terminated');\n    TransformStreamErrorWritableAndUnblockWrite(stream, error);\n  } // TransformStreamDefaultSink Algorithms\n\n\n  function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n    const controller = stream._transformStreamController;\n\n    if (stream._backpressure) {\n      const backpressureChangePromise = stream._backpressureChangePromise;\n      return transformPromiseWith(backpressureChangePromise, () => {\n        const writable = stream._writable;\n        const state = writable._state;\n\n        if (state === 'erroring') {\n          throw writable._storedError;\n        }\n\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n      });\n    }\n\n    return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n  }\n\n  function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n    // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n    // errored.\n    TransformStreamError(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n    // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n    const readable = stream._readable;\n    const controller = stream._transformStreamController;\n\n    const flushPromise = controller._flushAlgorithm();\n\n    TransformStreamDefaultControllerClearAlgorithms(controller); // Return a promise that is fulfilled with undefined on success.\n\n    return transformPromiseWith(flushPromise, () => {\n      if (readable._state === 'errored') {\n        throw readable._storedError;\n      }\n\n      ReadableStreamDefaultControllerClose(readable._readableStreamController);\n    }, r => {\n      TransformStreamError(stream, r);\n      throw readable._storedError;\n    });\n  } // TransformStreamDefaultSource Algorithms\n\n\n  function TransformStreamDefaultSourcePullAlgorithm(stream) {\n    // Invariant. Enforced by the promises returned by start() and pull().\n    TransformStreamSetBackpressure(stream, false); // Prevent the next pull() call until there is backpressure.\n\n    return stream._backpressureChangePromise;\n  } // Helper functions for the TransformStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException(name) {\n    return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n  } // Helper functions for the TransformStream.\n\n\n  function streamBrandCheckException(name) {\n    return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n  }\n\n  exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n  exports.CountQueuingStrategy = CountQueuingStrategy;\n  exports.ReadableByteStreamController = ReadableByteStreamController;\n  exports.ReadableStream = ReadableStream;\n  exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n  exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n  exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n  exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n  exports.TransformStream = TransformStream;\n  exports.TransformStreamDefaultController = TransformStreamDefaultController;\n  exports.WritableStream = WritableStream;\n  exports.WritableStreamDefaultController = WritableStreamDefaultController;\n  exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ky_universal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ky-universal */ \"./node_modules/ky-universal/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([ky_universal__WEBPACK_IMPORTED_MODULE_0__]);\nky_universal__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function () {\n  console.log(\"Hello World!\", ky_universal__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n});\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:zlib");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "./node_modules/fetch-blob/streams.cjs":
/*!*********************************************!*\
  !*** ./node_modules/fetch-blob/streams.cjs ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = __webpack_require__(/*! node:process */ \"node:process\")\n    const { emitWarning } = process\n    try {\n      process.emitWarning = () => {}\n      Object.assign(globalThis, __webpack_require__(/*! node:stream/web */ \"node:stream/web\"))\n      process.emitWarning = emitWarning\n    } catch (error) {\n      process.emitWarning = emitWarning\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, __webpack_require__(/*! web-streams-polyfill/dist/ponyfill.es2018.js */ \"./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js\"))\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = __webpack_require__(/*! buffer */ \"buffer\")\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0\n      const blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\n          const buffer = await chunk.arrayBuffer()\n          position += buffer.byteLength\n          ctrl.enqueue(new Uint8Array(buffer))\n\n          if (position === blob.size) {\n            ctrl.close()\n          }\n        }\n      })\n    }\n  }\n} catch (error) {}\n/* c8 ignore end */\n\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/fetch-blob/streams.cjs?");

/***/ }),

/***/ "./node_modules/data-uri-to-buffer/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/data-uri-to-buffer/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"dataUriToBuffer\": () => (/* binding */ dataUriToBuffer),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nfunction dataUriToBuffer(uri) {\n  if (!/^data:/i.test(uri)) {\n    throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n  } // strip newlines\n\n\n  uri = uri.replace(/\\r?\\n/g, ''); // split the URI up into the \"metadata\" and the \"data\" portions\n\n  const firstComma = uri.indexOf(',');\n\n  if (firstComma === -1 || firstComma <= 4) {\n    throw new TypeError('malformed data: URI');\n  } // remove the \"data:\" scheme and parse the metadata\n\n\n  const meta = uri.substring(5, firstComma).split(';');\n  let charset = '';\n  let base64 = false;\n  const type = meta[0] || 'text/plain';\n  let typeFull = type;\n\n  for (let i = 1; i < meta.length; i++) {\n    if (meta[i] === 'base64') {\n      base64 = true;\n    } else {\n      typeFull += `;${meta[i]}`;\n\n      if (meta[i].indexOf('charset=') === 0) {\n        charset = meta[i].substring(8);\n      }\n    }\n  } // defaults to US-ASCII only if type is not provided\n\n\n  if (!meta[0] && !charset.length) {\n    typeFull += ';charset=US-ASCII';\n    charset = 'US-ASCII';\n  } // get the encoded data portion and decode URI-encoded chars\n\n\n  const encoding = base64 ? 'base64' : 'ascii';\n  const data = unescape(uri.substring(firstComma + 1));\n  const buffer = Buffer.from(data, encoding); // set `.type` and `.typeFull` properties to MIME type\n\n  buffer.type = type;\n  buffer.typeFull = typeFull; // set the `.charset` property\n\n  buffer.charset = charset;\n  return buffer;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dataUriToBuffer);\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/data-uri-to-buffer/dist/index.js?");

/***/ }),

/***/ "./node_modules/fetch-blob/file.js":
/*!*****************************************!*\
  !*** ./node_modules/fetch-blob/file.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"File\": () => (/* binding */ File),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./node_modules/fetch-blob/index.js\");\n\n\nconst _File = class File extends _index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  #lastModified = 0;\n  #name = '';\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */\n  // @ts-ignore\n\n  constructor(fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n    }\n\n    super(fileBits, options);\n    if (options === null) options = {}; // Simulate WebIDL type casting for NaN value in lastModified option.\n\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);\n\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified;\n    }\n\n    this.#name = String(fileName);\n  }\n\n  get name() {\n    return this.#name;\n  }\n\n  get lastModified() {\n    return this.#lastModified;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'File';\n  }\n\n  static [Symbol.hasInstance](object) {\n    return !!object && object instanceof _index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] && /^(File)$/.test(object[Symbol.toStringTag]);\n  }\n\n};\n/** @type {typeof globalThis.File} */\n// @ts-ignore\n\n\nconst File = _File;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (File);\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/fetch-blob/file.js?");

/***/ }),

/***/ "./node_modules/fetch-blob/from.js":
/*!*****************************************!*\
  !*** ./node_modules/fetch-blob/from.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Blob\": () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   \"File\": () => (/* reexport safe */ _file_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   \"blobFrom\": () => (/* binding */ blobFrom),\n/* harmony export */   \"blobFromSync\": () => (/* binding */ blobFromSync),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"fileFrom\": () => (/* binding */ fileFrom),\n/* harmony export */   \"fileFromSync\": () => (/* binding */ fileFromSync)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_domexception__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-domexception */ \"./node_modules/node-domexception/index.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file.js */ \"./node_modules/fetch-blob/file.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index.js */ \"./node_modules/fetch-blob/index.js\");\n\n\n\n\n\nconst {\n  stat\n} = node_fs__WEBPACK_IMPORTED_MODULE_0__.promises;\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\n\nconst blobFromSync = (path, type) => fromBlob((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.statSync)(path), path, type);\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\n\n\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\n\n\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type));\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\n\n\nconst fileFromSync = (path, type) => fromFile((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.statSync)(path), path, type); // @ts-ignore\n\n\nconst fromBlob = (stat, path, type = '') => new _index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], {\n  type\n}); // @ts-ignore\n\n\nconst fromFile = (stat, path, type = '') => new _file_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(path), {\n  type,\n  lastModified: stat.mtimeMs\n});\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\n\n\nclass BlobDataItem {\n  #path;\n  #start;\n\n  constructor(options) {\n    this.#path = options.path;\n    this.#start = options.start;\n    this.size = options.size;\n    this.lastModified = options.lastModified;\n    this.originalSize = options.originalSize === undefined ? options.size : options.originalSize;\n  }\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n\n\n  slice(start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      originalSize: this.originalSize,\n      size: end - start,\n      start: this.#start + start\n    });\n  }\n\n  async *stream() {\n    const {\n      mtimeMs,\n      size\n    } = await stat(this.#path);\n\n    if (mtimeMs > this.lastModified || this.originalSize !== size) {\n      throw new node_domexception__WEBPACK_IMPORTED_MODULE_2__('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError');\n    }\n\n    yield* (0,node_fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Blob';\n  }\n\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (blobFromSync);\n\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/fetch-blob/from.js?");

/***/ }),

/***/ "./node_modules/fetch-blob/index.js":
/*!******************************************!*\
  !*** ./node_modules/fetch-blob/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Blob\": () => (/* binding */ Blob),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _streams_cjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./streams.cjs */ \"./node_modules/fetch-blob/streams.cjs\");\n/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n // 64 KiB (same size chrome slice theirs blob into Uint8array's)\n\nconst POOL_SIZE = 65536;\n/** @param {(Blob | Uint8Array)[]} parts */\n\nasync function* toIterator(parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield* (\n        /** @type {AsyncIterableIterator<Uint8Array>} */\n        part.stream()\n      );\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset;\n        const end = part.byteOffset + part.byteLength;\n\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE);\n          const chunk = part.buffer.slice(position, position + size);\n          position += chunk.byteLength;\n          yield new Uint8Array(chunk);\n        }\n      } else {\n        yield part;\n      }\n      /* c8 ignore next 10 */\n\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0,\n          b =\n      /** @type {Blob} */\n      part;\n\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));\n        const buffer = await chunk.arrayBuffer();\n        position += buffer.byteLength;\n        yield new Uint8Array(buffer);\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = [];\n  #type = '';\n  #size = 0;\n  #endings = 'transparent';\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n\n  constructor(blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.');\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.');\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.');\n    }\n\n    if (options === null) options = {};\n    const encoder = new TextEncoder();\n\n    for (const element of blobParts) {\n      let part;\n\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0));\n      } else if (element instanceof Blob) {\n        part = element;\n      } else {\n        part = encoder.encode(`${element}`);\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size; // Avoid pushing empty parts into the array to better GC them\n\n      if (size) {\n        this.#size += size;\n        this.#parts.push(part);\n      }\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`;\n    const type = options.type === undefined ? '' : String(options.type);\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : '';\n  }\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n\n\n  get size() {\n    return this.#size;\n  }\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n\n\n  get type() {\n    return this.#type;\n  }\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n\n\n  async text() {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder();\n    let str = '';\n\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, {\n        stream: true\n      });\n    } // Remaining\n\n\n    str += decoder.decode();\n    return str;\n  }\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n\n\n  async arrayBuffer() {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n    const data = new Uint8Array(this.size);\n    let offset = 0;\n\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset);\n      offset += chunk.length;\n    }\n\n    return data.buffer;\n  }\n\n  stream() {\n    const it = toIterator(this.#parts, true);\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n\n      async pull(ctrl) {\n        const chunk = await it.next();\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n      },\n\n      async cancel() {\n        await it.return();\n      }\n\n    });\n  }\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n\n\n  slice(start = 0, end = this.size, type = '') {\n    const {\n      size\n    } = this;\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    const parts = this.#parts;\n    const blobParts = [];\n    let added = 0;\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break;\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size;\n        relativeEnd -= size;\n      } else {\n        let chunk;\n\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd));\n          added += chunk.byteLength;\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd));\n          added += chunk.size;\n        }\n\n        relativeEnd -= size;\n        blobParts.push(chunk);\n        relativeStart = 0; // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], {\n      type: String(type).toLowerCase()\n    });\n    blob.#size = span;\n    blob.#parts = blobParts;\n    return blob;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Blob';\n  }\n\n  static [Symbol.hasInstance](object) {\n    return object && typeof object === 'object' && typeof object.constructor === 'function' && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n  }\n\n};\n\nObject.defineProperties(_Blob.prototype, {\n  size: {\n    enumerable: true\n  },\n  type: {\n    enumerable: true\n  },\n  slice: {\n    enumerable: true\n  }\n});\n/** @type {typeof globalThis.Blob} */\n\nconst Blob = _Blob;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Blob);\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/fetch-blob/index.js?");

/***/ }),

/***/ "./node_modules/formdata-polyfill/esm.min.js":
/*!***************************************************!*\
  !*** ./node_modules/formdata-polyfill/esm.min.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"File\": () => (/* binding */ File),\n/* harmony export */   \"FormData\": () => (/* binding */ FormData),\n/* harmony export */   \"formDataToBlob\": () => (/* binding */ formDataToBlob)\n/* harmony export */ });\n/* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fetch-blob */ \"./node_modules/fetch-blob/index.js\");\n/* harmony import */ var fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fetch-blob/file.js */ \"./node_modules/fetch-blob/file.js\");\n/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n\n\nvar {\n  toStringTag: t,\n  iterator: i,\n  hasInstance: h\n} = Symbol,\n    r = Math.random,\n    m = 'append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\n    f = (a, b, c) => (a += '', /^(Blob|File)$/.test(b && b[t]) ? [(c = c !== void 0 ? c + '' : b[t] == 'File' ? b.name : 'blob', a), b.name !== c || b[t] == 'blob' ? new fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([b], c, b) : b] : [a, b + '']),\n    e = (c, f) => (f ? c : c.replace(/\\r?\\n|\\r/g, '\\r\\n')).replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22'),\n    x = (n, a, e) => {\n  if (a.length < e) {\n    throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`);\n  }\n};\n\nconst File = fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n/** @type {typeof globalThis.FormData} */\n\nconst FormData = class FormData {\n  #d = [];\n\n  constructor(...a) {\n    if (a.length) throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);\n  }\n\n  get [t]() {\n    return 'FormData';\n  }\n\n  [i]() {\n    return this.entries();\n  }\n\n  static [h](o) {\n    return o && typeof o === 'object' && o[t] === 'FormData' && !m.some(m => typeof o[m] != 'function');\n  }\n\n  append(...a) {\n    x('append', arguments, 2);\n    this.#d.push(f(...a));\n  }\n\n  delete(a) {\n    x('delete', arguments, 1);\n    a += '';\n    this.#d = this.#d.filter(([b]) => b !== a);\n  }\n\n  get(a) {\n    x('get', arguments, 1);\n    a += '';\n\n    for (var b = this.#d, l = b.length, c = 0; c < l; c++) if (b[c][0] === a) return b[c][1];\n\n    return null;\n  }\n\n  getAll(a, b) {\n    x('getAll', arguments, 1);\n    b = [];\n    a += '';\n    this.#d.forEach(c => c[0] === a && b.push(c[1]));\n    return b;\n  }\n\n  has(a) {\n    x('has', arguments, 1);\n    a += '';\n    return this.#d.some(b => b[0] === a);\n  }\n\n  forEach(a, b) {\n    x('forEach', arguments, 1);\n\n    for (var [c, d] of this) a.call(b, d, c, this);\n  }\n\n  set(...a) {\n    x('set', arguments, 2);\n    var b = [],\n        c = !0;\n    a = f(...a);\n    this.#d.forEach(d => {\n      d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);\n    });\n    c && b.push(a);\n    this.#d = b;\n  }\n\n  *entries() {\n    yield* this.#d;\n  }\n\n  *keys() {\n    for (var [a] of this) yield a;\n  }\n\n  *values() {\n    for (var [, a] of this) yield a;\n  }\n\n};\n/** @param {FormData} F */\n\nfunction formDataToBlob(F, B = fetch_blob__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n  var b = `${r()}${r()}`.replace(/\\./g, '').slice(-28).padStart(32, '-'),\n      c = [],\n      p = `--${b}\\r\\nContent-Disposition: form-data; name=\"`;\n  F.forEach((v, n) => typeof v == 'string' ? c.push(p + e(n) + `\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n')}\\r\\n`) : c.push(p + e(n) + `\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type || \"application/octet-stream\"}\\r\\n\\r\\n`, v, '\\r\\n'));\n  c.push(`--${b}--`);\n  return new B(c, {\n    type: \"multipart/form-data; boundary=\" + b\n  });\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/formdata-polyfill/esm.min.js?");

/***/ }),

/***/ "./node_modules/ky-universal/index.js":
/*!********************************************!*\
  !*** ./node_modules/ky-universal/index.js ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HTTPError\": () => (/* reexport safe */ ky__WEBPACK_IMPORTED_MODULE_5__.HTTPError),\n/* harmony export */   \"TimeoutError\": () => (/* reexport safe */ ky__WEBPACK_IMPORTED_MODULE_5__.TimeoutError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/src/index.js\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/src/request.js\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/src/response.js\");\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! abort-controller */ \"./node_modules/abort-controller/dist/abort-controller.js\");\n/* harmony import */ var ky__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ky */ \"./node_modules/ky/distribution/index.js\");\n\n\n\nconst TEN_MEGABYTES = 1000 * 1000 * 10;\n\nif (!globalThis.fetch) {\n  globalThis.fetch = (url, options) => (0,node_fetch__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(url, {\n    highWaterMark: TEN_MEGABYTES,\n    ...options\n  });\n}\n\nif (!globalThis.Headers) {\n  globalThis.Headers = node_fetch__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n}\n\nif (!globalThis.Request) {\n  globalThis.Request = node_fetch__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n}\n\nif (!globalThis.Response) {\n  globalThis.Response = node_fetch__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n}\n\nif (!globalThis.AbortController) {\n  globalThis.AbortController = abort_controller__WEBPACK_IMPORTED_MODULE_0__;\n}\n\nif (!globalThis.ReadableStream) {\n  try {\n    // eslint-disable-next-line node/file-extension-in-import, node/no-unsupported-features/es-syntax\n    globalThis.ReadableStream = await __webpack_require__.e(/*! import() */ \"_787e\").then(__webpack_require__.t.bind(__webpack_require__, /*! web-streams-polyfill/ponyfill/es2018 */ \"?787e\", 19));\n  } catch {}\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ky__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky-universal/index.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/core/Ky.js":
/*!*************************************************!*\
  !*** ./node_modules/ky/distribution/core/Ky.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Ky\": () => (/* binding */ Ky)\n/* harmony export */ });\n/* harmony import */ var _errors_HTTPError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors/HTTPError.js */ \"./node_modules/ky/distribution/errors/HTTPError.js\");\n/* harmony import */ var _errors_TimeoutError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors/TimeoutError.js */ \"./node_modules/ky/distribution/errors/TimeoutError.js\");\n/* harmony import */ var _utils_merge_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/merge.js */ \"./node_modules/ky/distribution/utils/merge.js\");\n/* harmony import */ var _utils_normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/normalize.js */ \"./node_modules/ky/distribution/utils/normalize.js\");\n/* harmony import */ var _utils_time_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/time.js */ \"./node_modules/ky/distribution/utils/time.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/ky/distribution/core/constants.js\");\n\n\n\n\n\n\nclass Ky {\n  // eslint-disable-next-line complexity\n  constructor(input, options = {}) {\n    var _a, _b, _c;\n\n    this._retryCount = 0;\n    this._input = input;\n    this._options = {\n      // TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n      credentials: this._input.credentials || 'same-origin',\n      ...options,\n      headers: (0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_0__.mergeHeaders)(this._input.headers, options.headers),\n      hooks: (0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_0__.deepMerge)({\n        beforeRequest: [],\n        beforeRetry: [],\n        beforeError: [],\n        afterResponse: []\n      }, options.hooks),\n      method: (0,_utils_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalizeRequestMethod)((_a = options.method) !== null && _a !== void 0 ? _a : this._input.method),\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      prefixUrl: String(options.prefixUrl || ''),\n      retry: (0,_utils_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalizeRetryOptions)(options.retry),\n      throwHttpErrors: options.throwHttpErrors !== false,\n      timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,\n      fetch: (_b = options.fetch) !== null && _b !== void 0 ? _b : globalThis.fetch.bind(globalThis)\n    };\n\n    if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globalThis.Request)) {\n      throw new TypeError('`input` must be a string, URL, or Request');\n    }\n\n    if (this._options.prefixUrl && typeof this._input === 'string') {\n      if (this._input.startsWith('/')) {\n        throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n      }\n\n      if (!this._options.prefixUrl.endsWith('/')) {\n        this._options.prefixUrl += '/';\n      }\n\n      this._input = this._options.prefixUrl + this._input;\n    }\n\n    if (_constants_js__WEBPACK_IMPORTED_MODULE_2__.supportsAbortController) {\n      this.abortController = new globalThis.AbortController();\n\n      if (this._options.signal) {\n        this._options.signal.addEventListener('abort', () => {\n          this.abortController.abort();\n        });\n      }\n\n      this._options.signal = this.abortController.signal;\n    }\n\n    this.request = new globalThis.Request(this._input, this._options);\n\n    if (this._options.searchParams) {\n      // eslint-disable-next-line unicorn/prevent-abbreviations\n      const textSearchParams = typeof this._options.searchParams === 'string' ? this._options.searchParams.replace(/^\\?/, '') : new URLSearchParams(this._options.searchParams).toString(); // eslint-disable-next-line unicorn/prevent-abbreviations\n\n      const searchParams = '?' + textSearchParams;\n      const url = this.request.url.replace(/(?:\\?.*?)?(?=#|$)/, searchParams); // To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one\n\n      if ((_constants_js__WEBPACK_IMPORTED_MODULE_2__.supportsFormData && this._options.body instanceof globalThis.FormData || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {\n        this.request.headers.delete('content-type');\n      }\n\n      this.request = new globalThis.Request(new globalThis.Request(url, this.request), this._options);\n    }\n\n    if (this._options.json !== undefined) {\n      this._options.body = JSON.stringify(this._options.json);\n      this.request.headers.set('content-type', (_c = this._options.headers.get('content-type')) !== null && _c !== void 0 ? _c : 'application/json');\n      this.request = new globalThis.Request(this.request, {\n        body: this._options.body\n      });\n    }\n  } // eslint-disable-next-line @typescript-eslint/promise-function-async\n\n\n  static create(input, options) {\n    const ky = new Ky(input, options);\n\n    const fn = async () => {\n      if (ky._options.timeout > _constants_js__WEBPACK_IMPORTED_MODULE_2__.maxSafeTimeout) {\n        throw new RangeError(`The \\`timeout\\` option cannot be greater than ${_constants_js__WEBPACK_IMPORTED_MODULE_2__.maxSafeTimeout}`);\n      } // Delay the fetch so that body method shortcuts can set the Accept header\n\n\n      await Promise.resolve();\n      let response = await ky._fetch();\n\n      for (const hook of ky._options.hooks.afterResponse) {\n        // eslint-disable-next-line no-await-in-loop\n        const modifiedResponse = await hook(ky.request, ky._options, ky._decorateResponse(response.clone()));\n\n        if (modifiedResponse instanceof globalThis.Response) {\n          response = modifiedResponse;\n        }\n      }\n\n      ky._decorateResponse(response);\n\n      if (!response.ok && ky._options.throwHttpErrors) {\n        let error = new _errors_HTTPError_js__WEBPACK_IMPORTED_MODULE_3__.HTTPError(response, ky.request, ky._options);\n\n        for (const hook of ky._options.hooks.beforeError) {\n          // eslint-disable-next-line no-await-in-loop\n          error = await hook(error);\n        }\n\n        throw error;\n      } // If `onDownloadProgress` is passed, it uses the stream API internally\n\n      /* istanbul ignore next */\n\n\n      if (ky._options.onDownloadProgress) {\n        if (typeof ky._options.onDownloadProgress !== 'function') {\n          throw new TypeError('The `onDownloadProgress` option must be a function');\n        }\n\n        if (!_constants_js__WEBPACK_IMPORTED_MODULE_2__.supportsStreams) {\n          throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n        }\n\n        return ky._stream(response.clone(), ky._options.onDownloadProgress);\n      }\n\n      return response;\n    };\n\n    const isRetriableMethod = ky._options.retry.methods.includes(ky.request.method.toLowerCase());\n\n    const result = isRetriableMethod ? ky._retry(fn) : fn();\n\n    for (const [type, mimeType] of Object.entries(_constants_js__WEBPACK_IMPORTED_MODULE_2__.responseTypes)) {\n      result[type] = async () => {\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        ky.request.headers.set('accept', ky.request.headers.get('accept') || mimeType);\n        const awaitedResult = await result;\n        const response = awaitedResult.clone();\n\n        if (type === 'json') {\n          if (response.status === 204) {\n            return '';\n          }\n\n          if (options.parseJson) {\n            return options.parseJson(await response.text());\n          }\n        }\n\n        return response[type]();\n      };\n    }\n\n    return result;\n  }\n\n  _calculateRetryDelay(error) {\n    this._retryCount++;\n\n    if (this._retryCount < this._options.retry.limit && !(error instanceof _errors_TimeoutError_js__WEBPACK_IMPORTED_MODULE_4__.TimeoutError)) {\n      if (error instanceof _errors_HTTPError_js__WEBPACK_IMPORTED_MODULE_3__.HTTPError) {\n        if (!this._options.retry.statusCodes.includes(error.response.status)) {\n          return 0;\n        }\n\n        const retryAfter = error.response.headers.get('Retry-After');\n\n        if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {\n          let after = Number(retryAfter);\n\n          if (Number.isNaN(after)) {\n            after = Date.parse(retryAfter) - Date.now();\n          } else {\n            after *= 1000;\n          }\n\n          if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n            return 0;\n          }\n\n          return after;\n        }\n\n        if (error.response.status === 413) {\n          return 0;\n        }\n      }\n\n      const BACKOFF_FACTOR = 0.3;\n      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1000;\n    }\n\n    return 0;\n  }\n\n  _decorateResponse(response) {\n    if (this._options.parseJson) {\n      response.json = async () => this._options.parseJson(await response.text());\n    }\n\n    return response;\n  }\n\n  async _retry(fn) {\n    try {\n      return await fn(); // eslint-disable-next-line @typescript-eslint/no-implicit-any-catch\n    } catch (error) {\n      const ms = Math.min(this._calculateRetryDelay(error), _constants_js__WEBPACK_IMPORTED_MODULE_2__.maxSafeTimeout);\n\n      if (ms !== 0 && this._retryCount > 0) {\n        await (0,_utils_time_js__WEBPACK_IMPORTED_MODULE_5__.delay)(ms);\n\n        for (const hook of this._options.hooks.beforeRetry) {\n          // eslint-disable-next-line no-await-in-loop\n          const hookResult = await hook({\n            request: this.request,\n            options: this._options,\n            error: error,\n            retryCount: this._retryCount\n          }); // If `stop` is returned from the hook, the retry process is stopped\n\n          if (hookResult === _constants_js__WEBPACK_IMPORTED_MODULE_2__.stop) {\n            return;\n          }\n        }\n\n        return this._retry(fn);\n      }\n\n      throw error;\n    }\n  }\n\n  async _fetch() {\n    for (const hook of this._options.hooks.beforeRequest) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await hook(this.request, this._options);\n\n      if (result instanceof Request) {\n        this.request = result;\n        break;\n      }\n\n      if (result instanceof Response) {\n        return result;\n      }\n    }\n\n    if (this._options.timeout === false) {\n      return this._options.fetch(this.request.clone());\n    }\n\n    return (0,_utils_time_js__WEBPACK_IMPORTED_MODULE_5__.timeout)(this.request.clone(), this.abortController, this._options);\n  }\n  /* istanbul ignore next */\n\n\n  _stream(response, onDownloadProgress) {\n    const totalBytes = Number(response.headers.get('content-length')) || 0;\n    let transferredBytes = 0;\n    return new globalThis.Response(new globalThis.ReadableStream({\n      async start(controller) {\n        const reader = response.body.getReader();\n\n        if (onDownloadProgress) {\n          onDownloadProgress({\n            percent: 0,\n            transferredBytes: 0,\n            totalBytes\n          }, new Uint8Array());\n        }\n\n        async function read() {\n          const {\n            done,\n            value\n          } = await reader.read();\n\n          if (done) {\n            controller.close();\n            return;\n          }\n\n          if (onDownloadProgress) {\n            transferredBytes += value.byteLength;\n            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n            onDownloadProgress({\n              percent,\n              transferredBytes,\n              totalBytes\n            }, value);\n          }\n\n          controller.enqueue(value);\n          await read();\n        }\n\n        await read();\n      }\n\n    }));\n  }\n\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/core/Ky.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/core/constants.js":
/*!********************************************************!*\
  !*** ./node_modules/ky/distribution/core/constants.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"maxSafeTimeout\": () => (/* binding */ maxSafeTimeout),\n/* harmony export */   \"requestMethods\": () => (/* binding */ requestMethods),\n/* harmony export */   \"responseTypes\": () => (/* binding */ responseTypes),\n/* harmony export */   \"stop\": () => (/* binding */ stop),\n/* harmony export */   \"supportsAbortController\": () => (/* binding */ supportsAbortController),\n/* harmony export */   \"supportsFormData\": () => (/* binding */ supportsFormData),\n/* harmony export */   \"supportsStreams\": () => (/* binding */ supportsStreams)\n/* harmony export */ });\nconst supportsAbortController = typeof globalThis.AbortController === 'function';\nconst supportsStreams = typeof globalThis.ReadableStream === 'function';\nconst supportsFormData = typeof globalThis.FormData === 'function';\nconst requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'];\n\nconst validate = () => undefined;\n\nvalidate();\nconst responseTypes = {\n  json: 'application/json',\n  text: 'text/*',\n  formData: 'multipart/form-data',\n  arrayBuffer: '*/*',\n  blob: '*/*'\n}; // The maximum value of a 32bit int (see issue #117)\n\nconst maxSafeTimeout = 2147483647;\nconst stop = Symbol('stop');\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/core/constants.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/errors/HTTPError.js":
/*!**********************************************************!*\
  !*** ./node_modules/ky/distribution/errors/HTTPError.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HTTPError\": () => (/* binding */ HTTPError)\n/* harmony export */ });\n// eslint-lint-disable-next-line @typescript-eslint/naming-convention\nclass HTTPError extends Error {\n  constructor(response, request, options) {\n    const code = response.status || response.status === 0 ? response.status : '';\n    const title = response.statusText || '';\n    const status = `${code} ${title}`.trim();\n    const reason = status ? `status code ${status}` : 'an unknown error';\n    super(`Request failed with ${reason}`);\n    this.name = 'HTTPError';\n    this.response = response;\n    this.request = request;\n    this.options = options;\n  }\n\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/errors/HTTPError.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/errors/TimeoutError.js":
/*!*************************************************************!*\
  !*** ./node_modules/ky/distribution/errors/TimeoutError.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TimeoutError\": () => (/* binding */ TimeoutError)\n/* harmony export */ });\nclass TimeoutError extends Error {\n  constructor(request) {\n    super('Request timed out');\n    this.name = 'TimeoutError';\n    this.request = request;\n  }\n\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/errors/TimeoutError.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/index.js":
/*!***********************************************!*\
  !*** ./node_modules/ky/distribution/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HTTPError\": () => (/* reexport safe */ _errors_HTTPError_js__WEBPACK_IMPORTED_MODULE_3__.HTTPError),\n/* harmony export */   \"TimeoutError\": () => (/* reexport safe */ _errors_TimeoutError_js__WEBPACK_IMPORTED_MODULE_4__.TimeoutError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _core_Ky_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/Ky.js */ \"./node_modules/ky/distribution/core/Ky.js\");\n/* harmony import */ var _core_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/constants.js */ \"./node_modules/ky/distribution/core/constants.js\");\n/* harmony import */ var _utils_merge_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/merge.js */ \"./node_modules/ky/distribution/utils/merge.js\");\n/* harmony import */ var _errors_HTTPError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors/HTTPError.js */ \"./node_modules/ky/distribution/errors/HTTPError.js\");\n/* harmony import */ var _errors_TimeoutError_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors/TimeoutError.js */ \"./node_modules/ky/distribution/errors/TimeoutError.js\");\n/*! MIT License © Sindre Sorhus */\n\n\n\n\nconst createInstance = defaults => {\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  const ky = (input, options) => _core_Ky_js__WEBPACK_IMPORTED_MODULE_0__.Ky.create(input, (0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_1__.validateAndMerge)(defaults, options));\n\n  for (const method of _core_constants_js__WEBPACK_IMPORTED_MODULE_2__.requestMethods) {\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\n    ky[method] = (input, options) => _core_Ky_js__WEBPACK_IMPORTED_MODULE_0__.Ky.create(input, (0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_1__.validateAndMerge)(defaults, options, {\n      method\n    }));\n  }\n\n  ky.create = newDefaults => createInstance((0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_1__.validateAndMerge)(newDefaults));\n\n  ky.extend = newDefaults => createInstance((0,_utils_merge_js__WEBPACK_IMPORTED_MODULE_1__.validateAndMerge)(defaults, newDefaults));\n\n  ky.stop = _core_constants_js__WEBPACK_IMPORTED_MODULE_2__.stop;\n  return ky;\n};\n\nconst ky = createInstance();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ky);\n\n\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/index.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/utils/is.js":
/*!**************************************************!*\
  !*** ./node_modules/ky/distribution/utils/is.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isObject\": () => (/* binding */ isObject)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst isObject = value => value !== null && typeof value === 'object';\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/utils/is.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/utils/merge.js":
/*!*****************************************************!*\
  !*** ./node_modules/ky/distribution/utils/merge.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"deepMerge\": () => (/* binding */ deepMerge),\n/* harmony export */   \"mergeHeaders\": () => (/* binding */ mergeHeaders),\n/* harmony export */   \"validateAndMerge\": () => (/* binding */ validateAndMerge)\n/* harmony export */ });\n/* harmony import */ var _is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is.js */ \"./node_modules/ky/distribution/utils/is.js\");\n\nconst validateAndMerge = (...sources) => {\n  for (const source of sources) {\n    if ((!(0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n      throw new TypeError('The `options` argument must be an object');\n    }\n  }\n\n  return deepMerge({}, ...sources);\n};\nconst mergeHeaders = (source1 = {}, source2 = {}) => {\n  const result = new globalThis.Headers(source1);\n  const isHeadersInstance = source2 instanceof globalThis.Headers;\n  const source = new globalThis.Headers(source2);\n\n  for (const [key, value] of source.entries()) {\n    if (isHeadersInstance && value === 'undefined' || value === undefined) {\n      result.delete(key);\n    } else {\n      result.set(key, value);\n    }\n  }\n\n  return result;\n}; // TODO: Make this strongly-typed (no `any`).\n\nconst deepMerge = (...sources) => {\n  let returnValue = {};\n  let headers = {};\n\n  for (const source of sources) {\n    if (Array.isArray(source)) {\n      if (!Array.isArray(returnValue)) {\n        returnValue = [];\n      }\n\n      returnValue = [...returnValue, ...source];\n    } else if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source)) {\n      for (let [key, value] of Object.entries(source)) {\n        if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) && key in returnValue) {\n          value = deepMerge(returnValue[key], value);\n        }\n\n        returnValue = { ...returnValue,\n          [key]: value\n        };\n      }\n\n      if ((0,_is_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(source.headers)) {\n        headers = mergeHeaders(headers, source.headers);\n        returnValue.headers = headers;\n      }\n    }\n  }\n\n  return returnValue;\n};\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/utils/merge.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/utils/normalize.js":
/*!*********************************************************!*\
  !*** ./node_modules/ky/distribution/utils/normalize.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"normalizeRequestMethod\": () => (/* binding */ normalizeRequestMethod),\n/* harmony export */   \"normalizeRetryOptions\": () => (/* binding */ normalizeRetryOptions)\n/* harmony export */ });\n/* harmony import */ var _core_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/constants.js */ \"./node_modules/ky/distribution/core/constants.js\");\n\nconst normalizeRequestMethod = input => _core_constants_js__WEBPACK_IMPORTED_MODULE_0__.requestMethods.includes(input) ? input.toUpperCase() : input;\nconst retryMethods = ['get', 'put', 'head', 'delete', 'options', 'trace'];\nconst retryStatusCodes = [408, 413, 429, 500, 502, 503, 504];\nconst retryAfterStatusCodes = [413, 429, 503];\nconst defaultRetryOptions = {\n  limit: 2,\n  methods: retryMethods,\n  statusCodes: retryStatusCodes,\n  afterStatusCodes: retryAfterStatusCodes,\n  maxRetryAfter: Number.POSITIVE_INFINITY\n};\nconst normalizeRetryOptions = (retry = {}) => {\n  if (typeof retry === 'number') {\n    return { ...defaultRetryOptions,\n      limit: retry\n    };\n  }\n\n  if (retry.methods && !Array.isArray(retry.methods)) {\n    throw new Error('retry.methods must be an array');\n  }\n\n  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n    throw new Error('retry.statusCodes must be an array');\n  }\n\n  return { ...defaultRetryOptions,\n    ...retry,\n    afterStatusCodes: retryAfterStatusCodes\n  };\n};\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/utils/normalize.js?");

/***/ }),

/***/ "./node_modules/ky/distribution/utils/time.js":
/*!****************************************************!*\
  !*** ./node_modules/ky/distribution/utils/time.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"delay\": () => (/* binding */ delay),\n/* harmony export */   \"timeout\": () => (/* binding */ timeout)\n/* harmony export */ });\n/* harmony import */ var _errors_TimeoutError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/TimeoutError.js */ \"./node_modules/ky/distribution/errors/TimeoutError.js\");\n // `Promise.race()` workaround (#91)\n\nconst timeout = async (request, abortController, options) => new Promise((resolve, reject) => {\n  const timeoutId = setTimeout(() => {\n    if (abortController) {\n      abortController.abort();\n    }\n\n    reject(new _errors_TimeoutError_js__WEBPACK_IMPORTED_MODULE_0__.TimeoutError(request));\n  }, options.timeout);\n  void options.fetch(request).then(resolve).catch(reject).then(() => {\n    clearTimeout(timeoutId);\n  });\n});\nconst delay = async ms => new Promise(resolve => {\n  setTimeout(resolve, ms);\n});\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/ky/distribution/utils/time.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/body.js":
/*!*********************************************!*\
  !*** ./node_modules/node-fetch/src/body.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"default\": () => (/* binding */ Body),\n/* harmony export */   \"extractContentType\": () => (/* binding */ extractContentType),\n/* harmony export */   \"getTotalBytes\": () => (/* binding */ getTotalBytes),\n/* harmony export */   \"writeToStream\": () => (/* binding */ writeToStream)\n/* harmony export */ });\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fetch-blob */ \"./node_modules/fetch-blob/index.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"./node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors/base.js */ \"./node_modules/node-fetch/src/errors/base.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/is.js */ \"./node_modules/node-fetch/src/utils/is.js\");\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\n\n\n\n\n\n\n\nconst pipeline = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(node_stream__WEBPACK_IMPORTED_MODULE_0__.pipeline);\nconst INTERNALS = Symbol('Body internals');\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\n\nclass Body {\n  constructor(body, {\n    size = 0\n  } = {}) {\n    let boundary = null;\n\n    if (body === null) {\n      // Body is undefined or null\n      body = null;\n    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\n      // Body is a URLSearchParams\n      body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.toString());\n    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {// Body is blob\n    } else if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {// Body is Buffer\n    } else if (node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body)) {\n      // Body is ArrayBuffer\n      body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body);\n    } else if (ArrayBuffer.isView(body)) {\n      // Body is ArrayBufferView\n      body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n    } else if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {// Body is stream\n    } else if (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\n      // Body is FormData\n      body = (0,formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.formDataToBlob)(body);\n      boundary = body.type.split('=')[1];\n    } else {\n      // None of the above\n      // coerce to string then buffer\n      body = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(String(body));\n    }\n\n    let stream = body;\n\n    if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n      stream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body);\n    } else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n      stream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body.stream());\n    }\n\n    this[INTERNALS] = {\n      body,\n      stream,\n      boundary,\n      disturbed: false,\n      error: null\n    };\n    this.size = size;\n\n    if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n      body.on('error', error_ => {\n        const error = error_ instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ? error_ : new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n        this[INTERNALS].error = error;\n      });\n    }\n  }\n\n  get body() {\n    return this[INTERNALS].stream;\n  }\n\n  get bodyUsed() {\n    return this[INTERNALS].disturbed;\n  }\n  /**\n   * Decode response as ArrayBuffer\n   *\n   * @return  Promise\n   */\n\n\n  async arrayBuffer() {\n    const {\n      buffer,\n      byteOffset,\n      byteLength\n    } = await consumeBody(this);\n    return buffer.slice(byteOffset, byteOffset + byteLength);\n  }\n\n  async formData() {\n    const ct = this.headers.get('content-type');\n\n    if (ct.startsWith('application/x-www-form-urlencoded')) {\n      const formData = new formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData();\n      const parameters = new URLSearchParams(await this.text());\n\n      for (const [name, value] of parameters) {\n        formData.append(name, value);\n      }\n\n      return formData;\n    }\n\n    const {\n      toFormData\n    } = await __webpack_require__.e(/*! import() */ \"vendors-node_modules_node-fetch_src_utils_multipart-parser_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./utils/multipart-parser.js */ \"./node_modules/node-fetch/src/utils/multipart-parser.js\"));\n    return toFormData(this.body, ct);\n  }\n  /**\n   * Return raw response as Blob\n   *\n   * @return Promise\n   */\n\n\n  async blob() {\n    const ct = this.headers && this.headers.get('content-type') || this[INTERNALS].body && this[INTERNALS].body.type || '';\n    const buf = await this.arrayBuffer();\n    return new fetch_blob__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([buf], {\n      type: ct\n    });\n  }\n  /**\n   * Decode response as json\n   *\n   * @return  Promise\n   */\n\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n  /**\n   * Decode response as text\n   *\n   * @return  Promise\n   */\n\n\n  async text() {\n    const buffer = await consumeBody(this);\n    return new TextDecoder().decode(buffer);\n  }\n  /**\n   * Decode response as buffer (non-spec api)\n   *\n   * @return  Promise\n   */\n\n\n  buffer() {\n    return consumeBody(this);\n  }\n\n}\nBody.prototype.buffer = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer'); // In browsers, all properties are enumerable.\n\nObject.defineProperties(Body.prototype, {\n  body: {\n    enumerable: true\n  },\n  bodyUsed: {\n    enumerable: true\n  },\n  arrayBuffer: {\n    enumerable: true\n  },\n  blob: {\n    enumerable: true\n  },\n  json: {\n    enumerable: true\n  },\n  text: {\n    enumerable: true\n  },\n  data: {\n    get: (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(() => {}, 'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead', 'https://github.com/node-fetch/node-fetch/issues/1000 (response)')\n  }\n});\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\n\nasync function consumeBody(data) {\n  if (data[INTERNALS].disturbed) {\n    throw new TypeError(`body used already for: ${data.url}`);\n  }\n\n  data[INTERNALS].disturbed = true;\n\n  if (data[INTERNALS].error) {\n    throw data[INTERNALS].error;\n  }\n\n  const {\n    body\n  } = data; // Body is null\n\n  if (body === null) {\n    return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n  }\n  /* c8 ignore next 3 */\n\n\n  if (!(body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__)) {\n    return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n  } // Body is stream\n  // get ready to actually consume the body\n\n\n  const accum = [];\n  let accumBytes = 0;\n\n  try {\n    for await (const chunk of body) {\n      if (data.size > 0 && accumBytes + chunk.length > data.size) {\n        const error = new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n        body.destroy(error);\n        throw error;\n      }\n\n      accumBytes += chunk.length;\n      accum.push(chunk);\n    }\n  } catch (error) {\n    const error_ = error instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ? error : new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n    throw error_;\n  }\n\n  if (body.readableEnded === true || body._readableState.ended === true) {\n    try {\n      if (accum.every(c => typeof c === 'string')) {\n        return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(accum.join(''));\n      }\n\n      return node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.concat(accum, accumBytes);\n    } catch (error) {\n      throw new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n    }\n  } else {\n    throw new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n  }\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\n\n\nconst clone = (instance, highWaterMark) => {\n  let p1;\n  let p2;\n  let {\n    body\n  } = instance[INTERNALS]; // Don't allow cloning a used body\n\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used');\n  } // Check that body is a stream and not form-data object\n  // note: we can't clone the form-data object without having it as a dependency\n\n\n  if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__ && typeof body.getBoundary !== 'function') {\n    // Tee instance body\n    p1 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({\n      highWaterMark\n    });\n    p2 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({\n      highWaterMark\n    });\n    body.pipe(p1);\n    body.pipe(p2); // Set instance body to teed body and return the other teed body\n\n    instance[INTERNALS].stream = p1;\n    body = p2;\n  }\n\n  return body;\n};\nconst getNonSpecFormDataBoundary = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(body => body.getBoundary(), 'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package', 'https://github.com/node-fetch/node-fetch/issues/1167');\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\n\nconst extractContentType = (body, request) => {\n  // Body is null or undefined\n  if (body === null) {\n    return null;\n  } // Body is string\n\n\n  if (typeof body === 'string') {\n    return 'text/plain;charset=UTF-8';\n  } // Body is a URLSearchParams\n\n\n  if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\n    return 'application/x-www-form-urlencoded;charset=UTF-8';\n  } // Body is blob\n\n\n  if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n    return body.type || null;\n  } // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\n\n  if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body) || node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n    return null;\n  }\n\n  if (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\n    return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n  } // Detect form data input from form-data module\n\n\n  if (body && typeof body.getBoundary === 'function') {\n    return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n  } // Body is stream - can't really do much about this\n\n\n  if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\n    return null;\n  } // Body constructor defaults other things to string\n\n\n  return 'text/plain;charset=UTF-8';\n};\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\n\nconst getTotalBytes = request => {\n  const {\n    body\n  } = request[INTERNALS]; // Body is null or undefined\n\n  if (body === null) {\n    return 0;\n  } // Body is Blob\n\n\n  if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\n    return body.size;\n  } // Body is Buffer\n\n\n  if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\n    return body.length;\n  } // Detect form data input from form-data module\n\n\n  if (body && typeof body.getLengthSync === 'function') {\n    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n  } // Body is stream\n\n\n  return null;\n};\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\n\nconst writeToStream = async (dest, {\n  body\n}) => {\n  if (body === null) {\n    // Body is null\n    dest.end();\n  } else {\n    // Body is stream\n    await pipeline(body, dest);\n  }\n};\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/body.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/errors/abort-error.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-fetch/src/errors/abort-error.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbortError\": () => (/* binding */ AbortError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/node-fetch/src/errors/base.js\");\n\n/**\n * AbortError interface for cancelled requests\n */\n\nclass AbortError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\n  constructor(message, type = 'aborted') {\n    super(message, type);\n  }\n\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/errors/abort-error.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/errors/base.js":
/*!****************************************************!*\
  !*** ./node_modules/node-fetch/src/errors/base.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FetchBaseError\": () => (/* binding */ FetchBaseError)\n/* harmony export */ });\nclass FetchBaseError extends Error {\n  constructor(message, type) {\n    super(message); // Hide custom error implementation details from end-users\n\n    Error.captureStackTrace(this, this.constructor);\n    this.type = type;\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  }\n\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/errors/base.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/errors/fetch-error.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-fetch/src/errors/fetch-error.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FetchError\": () => (/* binding */ FetchError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"./node_modules/node-fetch/src/errors/base.js\");\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\n\nclass FetchError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\n  /**\n   * @param  {string} message -      Error message for human\n   * @param  {string} [type] -        Error type for machine\n   * @param  {SystemError} [systemError] - For Node.js system error\n   */\n  constructor(message, type, systemError) {\n    super(message, type); // When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\n    if (systemError) {\n      // eslint-disable-next-line no-multi-assign\n      this.code = this.errno = systemError.code;\n      this.erroredSysCall = systemError.syscall;\n    }\n  }\n\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/errors/fetch-error.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/headers.js":
/*!************************************************!*\
  !*** ./node_modules/node-fetch/src/headers.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Headers),\n/* harmony export */   \"fromRawHeaders\": () => (/* binding */ fromRawHeaders)\n/* harmony export */ });\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:http */ \"node:http\");\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\n\n/* c8 ignore next 9 */\n\nconst validateHeaderName = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName === 'function' ? node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName : name => {\n  if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n    const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_HTTP_TOKEN'\n    });\n    throw error;\n  }\n};\n/* c8 ignore next 9 */\n\nconst validateHeaderValue = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue === 'function' ? node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue : (name, value) => {\n  if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n    const error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_CHAR'\n    });\n    throw error;\n  }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\n\nclass Headers extends URLSearchParams {\n  /**\n   * Headers class\n   *\n   * @constructor\n   * @param {HeadersInit} [init] - Response headers\n   */\n  constructor(init) {\n    // Validate and normalize init object in [name, value(s)][]\n\n    /** @type {string[][]} */\n    let result = [];\n\n    if (init instanceof Headers) {\n      const raw = init.raw();\n\n      for (const [name, values] of Object.entries(raw)) {\n        result.push(...values.map(value => [name, value]));\n      }\n    } else if (init == null) {// eslint-disable-line no-eq-null, eqeqeq\n      // No op\n    } else if (typeof init === 'object' && !node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(init)) {\n      const method = init[Symbol.iterator]; // eslint-disable-next-line no-eq-null, eqeqeq\n\n      if (method == null) {\n        // Record<ByteString, ByteString>\n        result.push(...Object.entries(init));\n      } else {\n        if (typeof method !== 'function') {\n          throw new TypeError('Header pairs must be iterable');\n        } // Sequence<sequence<ByteString>>\n        // Note: per spec we have to first exhaust the lists then process them\n\n\n        result = [...init].map(pair => {\n          if (typeof pair !== 'object' || node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(pair)) {\n            throw new TypeError('Each header pair must be an iterable object');\n          }\n\n          return [...pair];\n        }).map(pair => {\n          if (pair.length !== 2) {\n            throw new TypeError('Each header pair must be a name/value tuple');\n          }\n\n          return [...pair];\n        });\n      }\n    } else {\n      throw new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n    } // Validate and lowercase\n\n\n    result = result.length > 0 ? result.map(([name, value]) => {\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return [String(name).toLowerCase(), String(value)];\n    }) : undefined;\n    super(result); // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n    // eslint-disable-next-line no-constructor-return\n\n    return new Proxy(this, {\n      get(target, p, receiver) {\n        switch (p) {\n          case 'append':\n          case 'set':\n            return (name, value) => {\n              validateHeaderName(name);\n              validateHeaderValue(name, String(value));\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));\n            };\n\n          case 'delete':\n          case 'has':\n          case 'getAll':\n            return name => {\n              validateHeaderName(name);\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n            };\n\n          case 'keys':\n            return () => {\n              target.sort();\n              return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n            };\n\n          default:\n            return Reflect.get(target, p, receiver);\n        }\n      }\n\n    });\n    /* c8 ignore next */\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name;\n  }\n\n  toString() {\n    return Object.prototype.toString.call(this);\n  }\n\n  get(name) {\n    const values = this.getAll(name);\n\n    if (values.length === 0) {\n      return null;\n    }\n\n    let value = values.join(', ');\n\n    if (/^content-encoding$/i.test(name)) {\n      value = value.toLowerCase();\n    }\n\n    return value;\n  }\n\n  forEach(callback, thisArg = undefined) {\n    for (const name of this.keys()) {\n      Reflect.apply(callback, thisArg, [this.get(name), name, this]);\n    }\n  }\n\n  *values() {\n    for (const name of this.keys()) {\n      yield this.get(name);\n    }\n  }\n  /**\n   * @type {() => IterableIterator<[string, string]>}\n   */\n\n\n  *entries() {\n    for (const name of this.keys()) {\n      yield [name, this.get(name)];\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Node-fetch non-spec method\n   * returning all headers and their values as array\n   * @returns {Record<string, string[]>}\n   */\n\n\n  raw() {\n    return [...this.keys()].reduce((result, key) => {\n      result[key] = this.getAll(key);\n      return result;\n    }, {});\n  }\n  /**\n   * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n   */\n\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return [...this.keys()].reduce((result, key) => {\n      const values = this.getAll(key); // Http.request() only supports string as Host header.\n      // This hack makes specifying custom Host header possible.\n\n      if (key === 'host') {\n        result[key] = values[0];\n      } else {\n        result[key] = values.length > 1 ? values : values[0];\n      }\n\n      return result;\n    }, {});\n  }\n\n}\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\n\nObject.defineProperties(Headers.prototype, ['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n  result[property] = {\n    enumerable: true\n  };\n  return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\n\nfunction fromRawHeaders(headers = []) {\n  return new Headers(headers // Split into pairs\n  .reduce((result, value, index, array) => {\n    if (index % 2 === 0) {\n      result.push(array.slice(index, index + 2));\n    }\n\n    return result;\n  }, []).filter(([name, value]) => {\n    try {\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return true;\n    } catch {\n      return false;\n    }\n  }));\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/headers.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/node-fetch/src/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbortError\": () => (/* reexport safe */ _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError),\n/* harmony export */   \"Blob\": () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.Blob),\n/* harmony export */   \"FetchError\": () => (/* reexport safe */ _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError),\n/* harmony export */   \"File\": () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.File),\n/* harmony export */   \"FormData\": () => (/* reexport safe */ formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__.FormData),\n/* harmony export */   \"Headers\": () => (/* reexport safe */ _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   \"Request\": () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   \"Response\": () => (/* reexport safe */ _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   \"blobFrom\": () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFrom),\n/* harmony export */   \"blobFromSync\": () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFromSync),\n/* harmony export */   \"default\": () => (/* binding */ fetch),\n/* harmony export */   \"fileFrom\": () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFrom),\n/* harmony export */   \"fileFromSync\": () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFromSync),\n/* harmony export */   \"isRedirect\": () => (/* reexport safe */ _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! data-uri-to-buffer */ \"./node_modules/data-uri-to-buffer/dist/index.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./body.js */ \"./node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./response.js */ \"./node_modules/node-fetch/src/response.js\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./headers.js */ \"./node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./request.js */ \"./node_modules/node-fetch/src/request.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"./node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./errors/abort-error.js */ \"./node_modules/node-fetch/src/errors/abort-error.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"./node_modules/node-fetch/src/utils/is-redirect.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/is.js */ \"./node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/referrer.js */ \"./node_modules/node-fetch/src/utils/referrer.js\");\n/* harmony import */ var fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fetch-blob/from.js */ \"./node_modules/fetch-blob/from.js\");\n/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\n\nasync function fetch(url, options_) {\n  return new Promise((resolve, reject) => {\n    // Build request object\n    const request = new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](url, options_);\n    const {\n      parsedURL,\n      options\n    } = (0,_request_js__WEBPACK_IMPORTED_MODULE_9__.getNodeRequestOptions)(request);\n\n    if (!supportedSchemas.has(parsedURL.protocol)) {\n      throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n    }\n\n    if (parsedURL.protocol === 'data:') {\n      const data = (0,data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(request.url);\n      const response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](data, {\n        headers: {\n          'Content-Type': data.typeFull\n        }\n      });\n      resolve(response);\n      return;\n    } // Wrap http.request into fetch\n\n\n    const send = (parsedURL.protocol === 'https:' ? node_https__WEBPACK_IMPORTED_MODULE_1__ : node_http__WEBPACK_IMPORTED_MODULE_0__).request;\n    const {\n      signal\n    } = request;\n    let response = null;\n\n    const abort = () => {\n      const error = new _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError('The operation was aborted.');\n      reject(error);\n\n      if (request.body && request.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n        request.body.destroy(error);\n      }\n\n      if (!response || !response.body) {\n        return;\n      }\n\n      response.body.emit('error', error);\n    };\n\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n\n    const abortAndFinalize = () => {\n      abort();\n      finalize();\n    }; // Send request\n\n\n    const request_ = send(parsedURL.toString(), options);\n\n    if (signal) {\n      signal.addEventListener('abort', abortAndFinalize);\n    }\n\n    const finalize = () => {\n      request_.abort();\n\n      if (signal) {\n        signal.removeEventListener('abort', abortAndFinalize);\n      }\n    };\n\n    request_.on('error', error => {\n      reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n      finalize();\n    });\n    fixResponseChunkedTransferBadEnding(request_, error => {\n      if (response && response.body) {\n        response.body.destroy(error);\n      }\n    });\n    /* c8 ignore next 18 */\n\n    if (process.version < 'v14') {\n      // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n      // properly handle when the socket close/end events are out of order.\n      request_.on('socket', s => {\n        let endedWithEventsCount;\n        s.prependListener('end', () => {\n          endedWithEventsCount = s._eventsCount;\n        });\n        s.prependListener('close', hadError => {\n          // if end happened before close but the socket didn't emit an error, do it now\n          if (response && endedWithEventsCount < s._eventsCount && !hadError) {\n            const error = new Error('Premature close');\n            error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n            response.body.emit('error', error);\n          }\n        });\n      });\n    }\n\n    request_.on('response', response_ => {\n      request_.setTimeout(0);\n      const headers = (0,_headers_js__WEBPACK_IMPORTED_MODULE_8__.fromRawHeaders)(response_.rawHeaders); // HTTP fetch step 5\n\n      if ((0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)(response_.statusCode)) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location'); // HTTP fetch step 5.3\n\n        let locationURL = null;\n\n        try {\n          locationURL = location === null ? null : new URL(location, request.url);\n        } catch {\n          // error here can only be invalid URL in Location: header\n          // do not throw when options.redirect == manual\n          // let the user extract the errorneous redirect URL\n          if (request.redirect !== 'manual') {\n            reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n            finalize();\n            return;\n          }\n        } // HTTP fetch step 5.5\n\n\n        switch (request.redirect) {\n          case 'error':\n            reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n            finalize();\n            return;\n\n          case 'manual':\n            // Nothing to do\n            break;\n\n          case 'follow':\n            {\n              // HTTP-redirect fetch step 2\n              if (locationURL === null) {\n                break;\n              } // HTTP-redirect fetch step 5\n\n\n              if (request.counter >= request.follow) {\n                reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n                finalize();\n                return;\n              } // HTTP-redirect fetch step 6 (counter increment)\n              // Create a new Request object.\n\n\n              const requestOptions = {\n                headers: new _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](request.headers),\n                follow: request.follow,\n                counter: request.counter + 1,\n                agent: request.agent,\n                compress: request.compress,\n                method: request.method,\n                body: (0,_body_js__WEBPACK_IMPORTED_MODULE_14__.clone)(request),\n                signal: request.signal,\n                size: request.size,\n                referrer: request.referrer,\n                referrerPolicy: request.referrerPolicy\n              }; // when forwarding sensitive headers like \"Authorization\",\n              // \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n              // headers will be ignored when following a redirect to a domain\n              // that is not a subdomain match or exact match of the initial domain.\n              // For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n              // will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\n              if (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_15__.isDomainOrSubdomain)(request.url, locationURL)) {\n                for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n                  requestOptions.headers.delete(name);\n                }\n              } // HTTP-redirect fetch step 9\n\n\n              if (response_.statusCode !== 303 && request.body && options_.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\n                reject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n                finalize();\n                return;\n              } // HTTP-redirect fetch step 11\n\n\n              if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST') {\n                requestOptions.method = 'GET';\n                requestOptions.body = undefined;\n                requestOptions.headers.delete('content-length');\n              } // HTTP-redirect fetch step 14\n\n\n              const responseReferrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__.parseReferrerPolicyFromHeader)(headers);\n\n              if (responseReferrerPolicy) {\n                requestOptions.referrerPolicy = responseReferrerPolicy;\n              } // HTTP-redirect fetch step 15\n\n\n              resolve(fetch(new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](locationURL, requestOptions)));\n              finalize();\n              return;\n            }\n\n          default:\n            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n        }\n      } // Prepare response\n\n\n      if (signal) {\n        response_.once('end', () => {\n          signal.removeEventListener('abort', abortAndFinalize);\n        });\n      }\n\n      let body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), error => {\n        if (error) {\n          reject(error);\n        }\n      }); // see https://github.com/nodejs/node/pull/29376\n\n      /* c8 ignore next 3 */\n\n      if (process.version < 'v12.10') {\n        response_.on('aborted', abortAndFinalize);\n      }\n\n      const responseOptions = {\n        url: request.url,\n        status: response_.statusCode,\n        statusText: response_.statusMessage,\n        headers,\n        size: request.size,\n        counter: request.counter,\n        highWaterMark: request.highWaterMark\n      }; // HTTP-network fetch step 12.1.1.3\n\n      const codings = headers.get('Content-Encoding'); // HTTP-network fetch step 12.1.1.4: handle content codings\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n\n      if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n        response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n        resolve(response);\n        return;\n      } // For Node v6+\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n\n\n      const zlibOptions = {\n        flush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH,\n        finishFlush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH\n      }; // For gzip\n\n      if (codings === 'gzip' || codings === 'x-gzip') {\n        body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip(zlibOptions), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n        resolve(response);\n        return;\n      } // For deflate\n\n\n      if (codings === 'deflate' || codings === 'x-deflate') {\n        // Handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        raw.once('data', chunk => {\n          // See http://stackoverflow.com/questions/37519828\n          if ((chunk[0] & 0x0F) === 0x08) {\n            body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate(), error => {\n              if (error) {\n                reject(error);\n              }\n            });\n          } else {\n            body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflateRaw(), error => {\n              if (error) {\n                reject(error);\n              }\n            });\n          }\n\n          response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n          resolve(response);\n        });\n        raw.once('end', () => {\n          // Some old IIS servers return zero-length OK deflate responses, so\n          // 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n          if (!response) {\n            response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n            resolve(response);\n          }\n        });\n        return;\n      } // For br\n\n\n      if (codings === 'br') {\n        body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createBrotliDecompress(), error => {\n          if (error) {\n            reject(error);\n          }\n        });\n        response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n        resolve(response);\n        return;\n      } // Otherwise, use response as-is\n\n\n      response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\n      resolve(response);\n    }); // eslint-disable-next-line promise/prefer-await-to-then\n\n    (0,_body_js__WEBPACK_IMPORTED_MODULE_14__.writeToStream)(request_, request).catch(reject);\n  });\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n  const LAST_CHUNK = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from('0\\r\\n\\r\\n');\n  let isChunkedTransfer = false;\n  let properLastChunkReceived = false;\n  let previousChunk;\n  request.on('response', response => {\n    const {\n      headers\n    } = response;\n    isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n  });\n  request.on('socket', socket => {\n    const onSocketClose = () => {\n      if (isChunkedTransfer && !properLastChunkReceived) {\n        const error = new Error('Premature close');\n        error.code = 'ERR_STREAM_PREMATURE_CLOSE';\n        errorCallback(error);\n      }\n    };\n\n    const onData = buf => {\n      properLastChunkReceived = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0; // Sometimes final 0-length chunk and end of message code are in separate packets\n\n      if (!properLastChunkReceived && previousChunk) {\n        properLastChunkReceived = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;\n      }\n\n      previousChunk = buf;\n    };\n\n    socket.prependListener('close', onSocketClose);\n    socket.on('data', onData);\n    request.on('close', () => {\n      socket.removeListener('close', onSocketClose);\n      socket.removeListener('data', onData);\n    });\n  });\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/index.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/request.js":
/*!************************************************!*\
  !*** ./node_modules/node-fetch/src/request.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Request),\n/* harmony export */   \"getNodeRequestOptions\": () => (/* binding */ getNodeRequestOptions)\n/* harmony export */ });\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./headers.js */ \"./node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./body.js */ \"./node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/is.js */ \"./node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/get-search.js */ \"./node_modules/node-fetch/src/utils/get-search.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/referrer.js */ \"./node_modules/node-fetch/src/utils/referrer.js\");\n/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\n\n\n\n\n\n\nconst INTERNALS = Symbol('Request internals');\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */\n\nconst isRequest = object => {\n  return typeof object === 'object' && typeof object[INTERNALS] === 'object';\n};\n\nconst doBadDataWarn = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(() => {}, '.data is not a valid RequestInit property, use .body instead', 'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\n\nclass Request extends _body_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n  constructor(input, init = {}) {\n    let parsedURL; // Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\n    if (isRequest(input)) {\n      parsedURL = new URL(input.url);\n    } else {\n      parsedURL = new URL(input);\n      input = {};\n    }\n\n    if (parsedURL.username !== '' || parsedURL.password !== '') {\n      throw new TypeError(`${parsedURL} is an url with embedded credentials.`);\n    }\n\n    let method = init.method || input.method || 'GET';\n\n    if (/^(delete|get|head|options|post|put)$/i.test(method)) {\n      method = method.toUpperCase();\n    }\n\n    if ('data' in init) {\n      doBadDataWarn();\n    } // eslint-disable-next-line no-eq-null, eqeqeq\n\n\n    if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body');\n    }\n\n    const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.clone)(input) : null;\n    super(inputBody, {\n      size: init.size || input.size || 0\n    });\n    const headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](init.headers || input.headers || {});\n\n    if (inputBody !== null && !headers.has('Content-Type')) {\n      const contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.extractContentType)(inputBody, this);\n\n      if (contentType) {\n        headers.set('Content-Type', contentType);\n      }\n    }\n\n    let signal = isRequest(input) ? input.signal : null;\n\n    if ('signal' in init) {\n      signal = init.signal;\n    } // eslint-disable-next-line no-eq-null, eqeqeq\n\n\n    if (signal != null && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_4__.isAbortSignal)(signal)) {\n      throw new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n    } // §5.4, Request constructor steps, step 15.1\n    // eslint-disable-next-line no-eq-null, eqeqeq\n\n\n    let referrer = init.referrer == null ? input.referrer : init.referrer;\n\n    if (referrer === '') {\n      // §5.4, Request constructor steps, step 15.2\n      referrer = 'no-referrer';\n    } else if (referrer) {\n      // §5.4, Request constructor steps, step 15.3.1, 15.3.2\n      const parsedReferrer = new URL(referrer); // §5.4, Request constructor steps, step 15.3.3, 15.3.4\n\n      referrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n    } else {\n      referrer = undefined;\n    }\n\n    this[INTERNALS] = {\n      method,\n      redirect: init.redirect || input.redirect || 'follow',\n      headers,\n      parsedURL,\n      signal,\n      referrer\n    }; // Node-fetch-only options\n\n    this.follow = init.follow === undefined ? input.follow === undefined ? 20 : input.follow : init.follow;\n    this.compress = init.compress === undefined ? input.compress === undefined ? true : input.compress : init.compress;\n    this.counter = init.counter || input.counter || 0;\n    this.agent = init.agent || input.agent;\n    this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n    this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false; // §5.4, Request constructor steps, step 16.\n    // Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\n    this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n  }\n  /** @returns {string} */\n\n\n  get method() {\n    return this[INTERNALS].method;\n  }\n  /** @returns {string} */\n\n\n  get url() {\n    return (0,node_url__WEBPACK_IMPORTED_MODULE_0__.format)(this[INTERNALS].parsedURL);\n  }\n  /** @returns {Headers} */\n\n\n  get headers() {\n    return this[INTERNALS].headers;\n  }\n\n  get redirect() {\n    return this[INTERNALS].redirect;\n  }\n  /** @returns {AbortSignal} */\n\n\n  get signal() {\n    return this[INTERNALS].signal;\n  } // https://fetch.spec.whatwg.org/#dom-request-referrer\n\n\n  get referrer() {\n    if (this[INTERNALS].referrer === 'no-referrer') {\n      return '';\n    }\n\n    if (this[INTERNALS].referrer === 'client') {\n      return 'about:client';\n    }\n\n    if (this[INTERNALS].referrer) {\n      return this[INTERNALS].referrer.toString();\n    }\n\n    return undefined;\n  }\n\n  get referrerPolicy() {\n    return this[INTERNALS].referrerPolicy;\n  }\n\n  set referrerPolicy(referrerPolicy) {\n    this[INTERNALS].referrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.validateReferrerPolicy)(referrerPolicy);\n  }\n  /**\n   * Clone this request\n   *\n   * @return  Request\n   */\n\n\n  clone() {\n    return new Request(this);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Request';\n  }\n\n}\nObject.defineProperties(Request.prototype, {\n  method: {\n    enumerable: true\n  },\n  url: {\n    enumerable: true\n  },\n  headers: {\n    enumerable: true\n  },\n  redirect: {\n    enumerable: true\n  },\n  clone: {\n    enumerable: true\n  },\n  signal: {\n    enumerable: true\n  },\n  referrer: {\n    enumerable: true\n  },\n  referrerPolicy: {\n    enumerable: true\n  }\n});\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */\n\nconst getNodeRequestOptions = request => {\n  const {\n    parsedURL\n  } = request[INTERNALS];\n  const headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](request[INTERNALS].headers); // Fetch step 1.3\n\n  if (!headers.has('Accept')) {\n    headers.set('Accept', '*/*');\n  } // HTTP-network-or-cache fetch steps 2.4-2.7\n\n\n  let contentLengthValue = null;\n\n  if (request.body === null && /^(post|put)$/i.test(request.method)) {\n    contentLengthValue = '0';\n  }\n\n  if (request.body !== null) {\n    const totalBytes = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.getTotalBytes)(request); // Set Content-Length if totalBytes is a number (that is not NaN)\n\n    if (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n      contentLengthValue = String(totalBytes);\n    }\n  }\n\n  if (contentLengthValue) {\n    headers.set('Content-Length', contentLengthValue);\n  } // 4.1. Main fetch, step 2.6\n  // > If request's referrer policy is the empty string, then set request's referrer policy to the\n  // > default referrer policy.\n\n\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_REFERRER_POLICY;\n  } // 4.1. Main fetch, step 2.7\n  // > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n  // > determine request's referrer.\n\n\n  if (request.referrer && request.referrer !== 'no-referrer') {\n    request[INTERNALS].referrer = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.determineRequestsReferrer)(request);\n  } else {\n    request[INTERNALS].referrer = 'no-referrer';\n  } // 4.5. HTTP-network-or-cache fetch, step 6.9\n  // > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n  // >  and isomorphic encoded, to httpRequest's header list.\n\n\n  if (request[INTERNALS].referrer instanceof URL) {\n    headers.set('Referer', request.referrer);\n  } // HTTP-network-or-cache fetch step 2.11\n\n\n  if (!headers.has('User-Agent')) {\n    headers.set('User-Agent', 'node-fetch');\n  } // HTTP-network-or-cache fetch step 2.15\n\n\n  if (request.compress && !headers.has('Accept-Encoding')) {\n    headers.set('Accept-Encoding', 'gzip, deflate, br');\n  }\n\n  let {\n    agent\n  } = request;\n\n  if (typeof agent === 'function') {\n    agent = agent(parsedURL);\n  }\n\n  if (!headers.has('Connection') && !agent) {\n    headers.set('Connection', 'close');\n  } // HTTP-network fetch step 4.2\n  // chunked encoding is handled by Node.js\n\n\n  const search = (0,_utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__.getSearch)(parsedURL); // Pass the full URL directly to request(), but overwrite the following\n  // options:\n\n  const options = {\n    // Overwrite search to retain trailing ? (issue #776)\n    path: parsedURL.pathname + search,\n    // The following options are not expressed in the URL\n    method: request.method,\n    headers: headers[Symbol.for('nodejs.util.inspect.custom')](),\n    insecureHTTPParser: request.insecureHTTPParser,\n    agent\n  };\n  return {\n    /** @type {URL} */\n    parsedURL,\n    options\n  };\n};\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/request.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/response.js":
/*!*************************************************!*\
  !*** ./node_modules/node-fetch/src/response.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Response)\n/* harmony export */ });\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./headers.js */ \"./node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./body.js */ \"./node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"./node_modules/node-fetch/src/utils/is-redirect.js\");\n/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\n\n\nconst INTERNALS = Symbol('Response internals');\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\n\nclass Response extends _body_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  constructor(body = null, options = {}) {\n    super(body, options); // eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\n    const status = options.status != null ? options.status : 200;\n    const headers = new _headers_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options.headers);\n\n    if (body !== null && !headers.has('Content-Type')) {\n      const contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_0__.extractContentType)(body, this);\n\n      if (contentType) {\n        headers.append('Content-Type', contentType);\n      }\n    }\n\n    this[INTERNALS] = {\n      type: 'default',\n      url: options.url,\n      status,\n      statusText: options.statusText || '',\n      headers,\n      counter: options.counter,\n      highWaterMark: options.highWaterMark\n    };\n  }\n\n  get type() {\n    return this[INTERNALS].type;\n  }\n\n  get url() {\n    return this[INTERNALS].url || '';\n  }\n\n  get status() {\n    return this[INTERNALS].status;\n  }\n  /**\n   * Convenience property representing if the request ended normally\n   */\n\n\n  get ok() {\n    return this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n  }\n\n  get redirected() {\n    return this[INTERNALS].counter > 0;\n  }\n\n  get statusText() {\n    return this[INTERNALS].statusText;\n  }\n\n  get headers() {\n    return this[INTERNALS].headers;\n  }\n\n  get highWaterMark() {\n    return this[INTERNALS].highWaterMark;\n  }\n  /**\n   * Clone this response\n   *\n   * @return  Response\n   */\n\n\n  clone() {\n    return new Response((0,_body_js__WEBPACK_IMPORTED_MODULE_0__.clone)(this, this.highWaterMark), {\n      type: this.type,\n      url: this.url,\n      status: this.status,\n      statusText: this.statusText,\n      headers: this.headers,\n      ok: this.ok,\n      redirected: this.redirected,\n      size: this.size,\n      highWaterMark: this.highWaterMark\n    });\n  }\n  /**\n   * @param {string} url    The URL that the new response is to originate from.\n   * @param {number} status An optional status code for the response (e.g., 302.)\n   * @returns {Response}    A Response object.\n   */\n\n\n  static redirect(url, status = 302) {\n    if (!(0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__.isRedirect)(status)) {\n      throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n    }\n\n    return new Response(null, {\n      headers: {\n        location: new URL(url).toString()\n      },\n      status\n    });\n  }\n\n  static error() {\n    const response = new Response(null, {\n      status: 0,\n      statusText: ''\n    });\n    response[INTERNALS].type = 'error';\n    return response;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Response';\n  }\n\n}\nObject.defineProperties(Response.prototype, {\n  type: {\n    enumerable: true\n  },\n  url: {\n    enumerable: true\n  },\n  status: {\n    enumerable: true\n  },\n  ok: {\n    enumerable: true\n  },\n  redirected: {\n    enumerable: true\n  },\n  statusText: {\n    enumerable: true\n  },\n  headers: {\n    enumerable: true\n  },\n  clone: {\n    enumerable: true\n  }\n});\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/response.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/utils/get-search.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/get-search.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSearch\": () => (/* binding */ getSearch)\n/* harmony export */ });\nconst getSearch = parsedURL => {\n  if (parsedURL.search) {\n    return parsedURL.search;\n  }\n\n  const lastOffset = parsedURL.href.length - 1;\n  const hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n  return parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/utils/get-search.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/utils/is-redirect.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/is-redirect.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isRedirect\": () => (/* binding */ isRedirect)\n/* harmony export */ });\nconst redirectStatus = new Set([301, 302, 303, 307, 308]);\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\n\nconst isRedirect = code => {\n  return redirectStatus.has(code);\n};\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/utils/is-redirect.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/utils/is.js":
/*!*************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/is.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isAbortSignal\": () => (/* binding */ isAbortSignal),\n/* harmony export */   \"isBlob\": () => (/* binding */ isBlob),\n/* harmony export */   \"isDomainOrSubdomain\": () => (/* binding */ isDomainOrSubdomain),\n/* harmony export */   \"isURLSearchParameters\": () => (/* binding */ isURLSearchParameters)\n/* harmony export */ });\n/**\n * Is.js\n *\n * Object type checks.\n */\nconst NAME = Symbol.toStringTag;\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\n\nconst isURLSearchParameters = object => {\n  return typeof object === 'object' && typeof object.append === 'function' && typeof object.delete === 'function' && typeof object.get === 'function' && typeof object.getAll === 'function' && typeof object.has === 'function' && typeof object.set === 'function' && typeof object.sort === 'function' && object[NAME] === 'URLSearchParams';\n};\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\n\nconst isBlob = object => {\n  return object && typeof object === 'object' && typeof object.arrayBuffer === 'function' && typeof object.type === 'string' && typeof object.stream === 'function' && typeof object.constructor === 'function' && /^(Blob|File)$/.test(object[NAME]);\n};\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\n\nconst isAbortSignal = object => {\n  return typeof object === 'object' && (object[NAME] === 'AbortSignal' || object[NAME] === 'EventTarget');\n};\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\n\nconst isDomainOrSubdomain = (destination, original) => {\n  const orig = new URL(original).hostname;\n  const dest = new URL(destination).hostname;\n  return orig === dest || orig.endsWith(`.${dest}`);\n};\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/utils/is.js?");

/***/ }),

/***/ "./node_modules/node-fetch/src/utils/referrer.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch/src/utils/referrer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_REFERRER_POLICY\": () => (/* binding */ DEFAULT_REFERRER_POLICY),\n/* harmony export */   \"ReferrerPolicy\": () => (/* binding */ ReferrerPolicy),\n/* harmony export */   \"determineRequestsReferrer\": () => (/* binding */ determineRequestsReferrer),\n/* harmony export */   \"isOriginPotentiallyTrustworthy\": () => (/* binding */ isOriginPotentiallyTrustworthy),\n/* harmony export */   \"isUrlPotentiallyTrustworthy\": () => (/* binding */ isUrlPotentiallyTrustworthy),\n/* harmony export */   \"parseReferrerPolicyFromHeader\": () => (/* binding */ parseReferrerPolicyFromHeader),\n/* harmony export */   \"stripURLForUseAsAReferrer\": () => (/* binding */ stripURLForUseAsAReferrer),\n/* harmony export */   \"validateReferrerPolicy\": () => (/* binding */ validateReferrerPolicy)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\n\nfunction stripURLForUseAsAReferrer(url, originOnly = false) {\n  // 1. If url is null, return no referrer.\n  if (url == null) {\n    // eslint-disable-line no-eq-null, eqeqeq\n    return 'no-referrer';\n  }\n\n  url = new URL(url); // 2. If url's scheme is a local scheme, then return no referrer.\n\n  if (/^(about|blob|data):$/.test(url.protocol)) {\n    return 'no-referrer';\n  } // 3. Set url's username to the empty string.\n\n\n  url.username = ''; // 4. Set url's password to null.\n  // Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\n  url.password = ''; // 5. Set url's fragment to null.\n  // Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\n  url.hash = ''; // 6. If the origin-only flag is true, then:\n\n  if (originOnly) {\n    // 6.1. Set url's path to null.\n    // Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n    url.pathname = ''; // 6.2. Set url's query to null.\n    // Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\n    url.search = '';\n  } // 7. Return url.\n\n\n  return url;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\n\nconst ReferrerPolicy = new Set(['', 'no-referrer', 'no-referrer-when-downgrade', 'same-origin', 'origin', 'strict-origin', 'origin-when-cross-origin', 'strict-origin-when-cross-origin', 'unsafe-url']);\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\n\nconst DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\n\nfunction validateReferrerPolicy(referrerPolicy) {\n  if (!ReferrerPolicy.has(referrerPolicy)) {\n    throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n  }\n\n  return referrerPolicy;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\n\nfunction isOriginPotentiallyTrustworthy(url) {\n  // 1. If origin is an opaque origin, return \"Not Trustworthy\".\n  // Not applicable\n  // 2. Assert: origin is a tuple origin.\n  // Not for implementations\n  // 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n  if (/^(http|ws)s:$/.test(url.protocol)) {\n    return true;\n  } // 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\n\n  const hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n  const hostIPVersion = (0,node_net__WEBPACK_IMPORTED_MODULE_0__.isIP)(hostIp);\n\n  if (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n    return true;\n  }\n\n  if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n    return true;\n  } // 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n  // We are returning FALSE here because we cannot ensure conformance to\n  // let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\n\n  if (/^(.+\\.)*localhost$/.test(url.host)) {\n    return false;\n  } // 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\n\n  if (url.protocol === 'file:') {\n    return true;\n  } // 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n  // Not supported\n  // 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n  // Not supported\n  // 9. Return \"Not Trustworthy\".\n\n\n  return false;\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\n\nfunction isUrlPotentiallyTrustworthy(url) {\n  // 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n  if (/^about:(blank|srcdoc)$/.test(url)) {\n    return true;\n  } // 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\n\n  if (url.protocol === 'data:') {\n    return true;\n  } // Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n  // created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n  // trustworthy.\n\n\n  if (/^(blob|filesystem):$/.test(url.protocol)) {\n    return true;\n  } // 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n\n\n  return isOriginPotentiallyTrustworthy(url);\n}\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\n\nfunction determineRequestsReferrer(request, {\n  referrerURLCallback,\n  referrerOriginCallback\n} = {}) {\n  // There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n  // these cases:\n  // > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n  // > Note: If request's referrer policy is the empty string, Fetch will not call into this\n  // > algorithm.\n  if (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n    return null;\n  } // 1. Let policy be request's associated referrer policy.\n\n\n  const policy = request.referrerPolicy; // 2. Let environment be request's client.\n  // not applicable to node.js\n  // 3. Switch on request's referrer:\n\n  if (request.referrer === 'about:client') {\n    return 'no-referrer';\n  } // \"a URL\": Let referrerSource be request's referrer.\n\n\n  const referrerSource = request.referrer; // 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\n  let referrerURL = stripURLForUseAsAReferrer(referrerSource); // 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n  //    origin-only flag set to true.\n\n  let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true); // 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n  //    referrerURL to referrerOrigin.\n\n  if (referrerURL.toString().length > 4096) {\n    referrerURL = referrerOrigin;\n  } // 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n  //    policy considerations in the interests of minimizing data leakage. For example, the user\n  //    agent could strip the URL down to an origin, modify its host, replace it with an empty\n  //    string, etc.\n\n\n  if (referrerURLCallback) {\n    referrerURL = referrerURLCallback(referrerURL);\n  }\n\n  if (referrerOriginCallback) {\n    referrerOrigin = referrerOriginCallback(referrerOrigin);\n  } // 8.Execute the statements corresponding to the value of policy:\n\n\n  const currentURL = new URL(request.url);\n\n  switch (policy) {\n    case 'no-referrer':\n      return 'no-referrer';\n\n    case 'origin':\n      return referrerOrigin;\n\n    case 'unsafe-url':\n      return referrerURL;\n\n    case 'strict-origin':\n      // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n      //    potentially trustworthy URL, then return no referrer.\n      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n        return 'no-referrer';\n      } // 2. Return referrerOrigin.\n\n\n      return referrerOrigin.toString();\n\n    case 'strict-origin-when-cross-origin':\n      // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n      //    return referrerURL.\n      if (referrerURL.origin === currentURL.origin) {\n        return referrerURL;\n      } // 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n      //    potentially trustworthy URL, then return no referrer.\n\n\n      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n        return 'no-referrer';\n      } // 3. Return referrerOrigin.\n\n\n      return referrerOrigin;\n\n    case 'same-origin':\n      // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n      //    return referrerURL.\n      if (referrerURL.origin === currentURL.origin) {\n        return referrerURL;\n      } // 2. Return no referrer.\n\n\n      return 'no-referrer';\n\n    case 'origin-when-cross-origin':\n      // 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n      //    return referrerURL.\n      if (referrerURL.origin === currentURL.origin) {\n        return referrerURL;\n      } // Return referrerOrigin.\n\n\n      return referrerOrigin;\n\n    case 'no-referrer-when-downgrade':\n      // 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n      //    potentially trustworthy URL, then return no referrer.\n      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n        return 'no-referrer';\n      } // 2. Return referrerURL.\n\n\n      return referrerURL;\n\n    default:\n      throw new TypeError(`Invalid referrerPolicy: ${policy}`);\n  }\n}\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\n\nfunction parseReferrerPolicyFromHeader(headers) {\n  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n  //    and response’s header list.\n  const policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/); // 2. Let policy be the empty string.\n\n  let policy = ''; // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n  //    string, then set policy to token.\n  // Note: This algorithm loops over multiple policy values to allow deployment of new policy\n  // values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n\n  for (const token of policyTokens) {\n    if (token && ReferrerPolicy.has(token)) {\n      policy = token;\n    }\n  } // 4. Return policy.\n\n\n  return policy;\n}\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/node-fetch/src/utils/referrer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			if(queue) queue.moduleId = module.id;
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			promise.moduleId = module.id;
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/readFile chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "0" means "already loaded", Promise means loading
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++) {
/******/ 				if(installedChunks[chunkIds[i]]) {
/******/ 					installedChunks[chunkIds[i]][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 		
/******/ 		};
/******/ 		
/******/ 		// ReadFile + VM.run chunk loading for javascript
/******/ 		__webpack_require__.f.readFileVm = function(chunkId, promises) {
/******/ 		
/******/ 			var installedChunkData = installedChunks[chunkId];
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 				// array of [resolve, reject, promise] means "currently loading"
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[2]);
/******/ 				} else {
/******/ 					if(true) { // all chunks have JS
/******/ 						// load the chunk and return promise to it
/******/ 						var promise = new Promise(function(resolve, reject) {
/******/ 							installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 							var filename = require('path').join(__dirname, "" + __webpack_require__.u(chunkId));
/******/ 							require('fs').readFile(filename, 'utf-8', function(err, content) {
/******/ 								if(err) return reject(err);
/******/ 								var chunk = {};
/******/ 								require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\n})', filename)(chunk, require, require('path').dirname(filename), filename);
/******/ 								installChunk(chunk);
/******/ 							});
/******/ 						});
/******/ 						promises.push(installedChunkData[2] = promise);
/******/ 					} else installedChunks[chunkId] = 0;
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		// no external install chunk
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;